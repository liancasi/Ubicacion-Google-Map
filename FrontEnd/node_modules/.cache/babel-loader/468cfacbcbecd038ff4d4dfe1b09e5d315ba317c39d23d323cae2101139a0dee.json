{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\git\\\\repository\\\\laboratoriofrontend\\\\src\\\\components\\\\UpdatePerson.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PersonaService from './PersonaService'; // Asegúrate de que la ruta sea correcta\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdatePerson = ({\n  personId\n}) => {\n  _s();\n  const [persona, setPersona] = useState({\n    // Inicializa los campos según tu modelo de datos\n    id: personId,\n    primerNombre: '',\n    segundoNombre: ''\n    // ... otros campos\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPersona({\n      ...persona,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await PersonaService.update(persona);\n      console.log(\"Persona actualizada:\", response);\n      // Maneja la actualización de la UI aquí (por ejemplo, redirecciona o muestra un mensaje)\n    } catch (error) {\n      console.error(\"Error al actualizar la persona:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"primerNombre\",\n      value: persona.primerNombre,\n      onChange: handleChange,\n      placeholder: \"Primer Nombre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Actualizar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(UpdatePerson, \"llgtlVxf97Dr/c5sVqtlwunVvyk=\");\n_c = UpdatePerson;\nexport default UpdatePerson;\nvar _c;\n$RefreshReg$(_c, \"UpdatePerson\");","map":{"version":3,"names":["React","useState","PersonaService","jsxDEV","_jsxDEV","UpdatePerson","personId","_s","persona","setPersona","id","primerNombre","segundoNombre","handleChange","e","name","value","target","handleSubmit","preventDefault","response","update","console","log","error","onSubmit","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/components/UpdatePerson.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PersonaService from './PersonaService'; // Asegúrate de que la ruta sea correcta\r\n\r\nconst UpdatePerson = ({ personId }) => {\r\n    const [persona, setPersona] = useState({\r\n        // Inicializa los campos según tu modelo de datos\r\n        id: personId,\r\n        primerNombre: '',\r\n        segundoNombre: '',\r\n        // ... otros campos\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setPersona({ ...persona, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await PersonaService.update(persona);\r\n            console.log(\"Persona actualizada:\", response);\r\n            // Maneja la actualización de la UI aquí (por ejemplo, redirecciona o muestra un mensaje)\r\n        } catch (error) {\r\n            console.error(\"Error al actualizar la persona:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                name=\"primerNombre\"\r\n                value={persona.primerNombre}\r\n                onChange={handleChange}\r\n                placeholder=\"Primer Nombre\"\r\n            />\r\n            {/* Añade más campos según tu modelo */}\r\n            <button type=\"submit\">Actualizar</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default UpdatePerson;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IACnC;IACAS,EAAE,EAAEJ,QAAQ;IACZK,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE;IACf;EACJ,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAIC,CAAC,IAAK;IACxB,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCR,UAAU,CAAC;MAAE,GAAGD,OAAO;MAAE,CAACO,IAAI,GAAGC;IAAM,CAAC,CAAC;EAC7C,CAAC;EAED,MAAME,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAC9BA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMlB,cAAc,CAACmB,MAAM,CAACb,OAAO,CAAC;MACrDc,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,QAAQ,CAAC;MAC7C;IACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAC3D;EACJ,CAAC;EAED,oBACIpB,OAAA;IAAMqB,QAAQ,EAAEP,YAAa;IAAAQ,QAAA,gBACzBtB,OAAA;MACIuB,IAAI,EAAC,MAAM;MACXZ,IAAI,EAAC,cAAc;MACnBC,KAAK,EAAER,OAAO,CAACG,YAAa;MAC5BiB,QAAQ,EAAEf,YAAa;MACvBgB,WAAW,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eAEF7B,OAAA;MAAQuB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEf,CAAC;AAAC1B,EAAA,CAtCIF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAwClB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}