{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9001/Laboratorio1'; // Reemplaza con la URL de tu API\n\nconst UsuarioService = {\n  // Método privado para obtener el token\n  _getToken: () => {\n    return localStorage.getItem(\"token\"); // Obtener el token\n  },\n  // Método para agregar un nuevo usuario\n  agregarUsuario: async usuario => {\n    try {\n      const token = UsuarioService._getToken(); // Obtener el token\n      const response = await axios.post(`${API_URL}/usuario`, usuario, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error(\"Error al agregar usuario:\", error);\n      throw error; // Lanzar error para manejarlo en el componente\n    }\n  },\n  // Método para cambiar la contraseña\n  cambiarPassword: async (id, newPassword) => {\n    try {\n      const token = UsuarioService._getToken(); // Obtener el token\n      const response = await axios.put(`${API_URL}/usuario/changePassword/${id}`, {\n        password: newPassword\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error(\"Error al cambiar la contraseña:\", error);\n      throw error; // Lanzar error para manejarlo en el componente\n    }\n  },\n  // Método para editar un usuario\n  editarUsuario: async usuario => {\n    try {\n      const token = UsuarioService._getToken(); // Obtener el token\n      const response = await axios.put(`${API_URL}/usuario`, usuario, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error(\"Error al editar usuario:\", error);\n      throw error; // Lanzar error para manejarlo en el componente\n    }\n  },\n  // Método para eliminar un usuario\n  eliminarUsuario: async (login, persona) => {\n    try {\n      const token = UsuarioService._getToken(); // Obtener el token\n      const response = await axios.delete(`${API_URL}/usuario/${login}/${persona}`, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error(\"Error al eliminar usuario:\", error);\n      throw error; // Lanzar error para manejarlo en el componente\n    }\n  },\n  // Método para listar usuarios\n  listarUsuarios: async (page, size) => {\n    try {\n      const token = UsuarioService._getToken(); // Obtener el token\n      const response = await axios.get(`${API_URL}/usuarios`, {\n        params: {\n          page,\n          size\n        },\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error(\"Error al listar usuarios:\", error);\n      throw error; // Lanzar error para manejarlo en el componente\n    }\n  },\n  // Método para obtener un usuario por login y persona\n  obtenerUsuario: async (login, persona) => {\n    try {\n      const token = UsuarioService._getToken(); // Obtener el token\n      const response = await axios.get(`${API_URL}/usuario/${login}/${persona}`, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error(\"Error al obtener usuario:\", error);\n      throw error; // Lanzar error para manejarlo en el componente\n    }\n  }\n};\nexport default UsuarioService;","map":{"version":3,"names":["axios","API_URL","UsuarioService","_getToken","localStorage","getItem","agregarUsuario","usuario","token","response","post","headers","data","error","console","cambiarPassword","id","newPassword","put","password","editarUsuario","eliminarUsuario","login","persona","delete","listarUsuarios","page","size","get","params","obtenerUsuario"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/UsuarioService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:9001/Laboratorio1'; // Reemplaza con la URL de tu API\r\n\r\nconst UsuarioService = {\r\n    // Método privado para obtener el token\r\n    _getToken: () => {\r\n        return localStorage.getItem(\"token\"); // Obtener el token\r\n    },\r\n\r\n    // Método para agregar un nuevo usuario\r\n    agregarUsuario: async (usuario) => {\r\n        try {\r\n            const token = UsuarioService._getToken(); // Obtener el token\r\n            const response = await axios.post(`${API_URL}/usuario`, usuario, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error(\"Error al agregar usuario:\", error);\r\n            throw error; // Lanzar error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Método para cambiar la contraseña\r\n    cambiarPassword: async (id, newPassword) => {\r\n        try {\r\n            const token = UsuarioService._getToken(); // Obtener el token\r\n            const response = await axios.put(`${API_URL}/usuario/changePassword/${id}`, { password: newPassword }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error(\"Error al cambiar la contraseña:\", error);\r\n            throw error; // Lanzar error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Método para editar un usuario\r\n    editarUsuario: async (usuario) => {\r\n        try {\r\n            const token = UsuarioService._getToken(); // Obtener el token\r\n            const response = await axios.put(`${API_URL}/usuario`, usuario, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error(\"Error al editar usuario:\", error);\r\n            throw error; // Lanzar error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Método para eliminar un usuario\r\n    eliminarUsuario: async (login, persona) => {\r\n        try {\r\n            const token = UsuarioService._getToken(); // Obtener el token\r\n            const response = await axios.delete(`${API_URL}/usuario/${login}/${persona}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error(\"Error al eliminar usuario:\", error);\r\n            throw error; // Lanzar error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Método para listar usuarios\r\n    listarUsuarios: async (page, size) => {\r\n        try {\r\n            const token = UsuarioService._getToken(); // Obtener el token\r\n            const response = await axios.get(`${API_URL}/usuarios`, { \r\n                params: { page, size },\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error(\"Error al listar usuarios:\", error);\r\n            throw error; // Lanzar error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Método para obtener un usuario por login y persona\r\n    obtenerUsuario: async (login, persona) => {\r\n        try {\r\n            const token = UsuarioService._getToken(); // Obtener el token\r\n            const response = await axios.get(`${API_URL}/usuario/${login}/${persona}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error(\"Error al obtener usuario:\", error);\r\n            throw error; // Lanzar error para manejarlo en el componente\r\n        }\r\n    },\r\n};\r\n\r\nexport default UsuarioService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}