{"ast":null,"code":"// src/services/AuthService.js\n\nconst API_BASE_URL = 'http://localhost:9001'; // Cambia esto si es necesario\n\nexport const AuthService = {\n  // Método para iniciar sesión\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/Laboratorio1/personas`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          login: username,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error en el inicio de sesión');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token); // Almacena el token\n      localStorage.setItem('apiKey', data.apiKey); // Almacena el API Key\n      return data; // Devuelve los datos, incluyendo el token\n    } catch (error) {\n      console.error('Error en login:', error);\n      throw error;\n    }\n  },\n  // Método para obtener la API Key\n  fetchApiKey: async username => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/apiKey`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'username': username // Envía el nombre de usuario como encabezado\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Error al obtener la API Key');\n      }\n      const data = await response.json();\n      return data; // Devuelve la API Key\n    } catch (error) {\n      console.error('Error en fetchApiKey:', error);\n      throw error; // Propaga el error\n    }\n  },\n  // Método para realizar solicitudes que requieren el API Key\n  makeAuthenticatedRequest: async endpoint => {\n    const apiKey = localStorage.getItem('apiKey'); // Obtiene el API Key del localStorage\n\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        method: 'GET',\n        // Cambia esto según el tipo de solicitud que necesites\n        headers: {\n          'Content-Type': 'application/json',\n          'apikey': apiKey // Incluye el API Key en los encabezados\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Error en la solicitud autenticada');\n      }\n      const data = await response.json();\n      return data; // Devuelve la respuesta de la solicitud\n    } catch (error) {\n      console.error('Error en makeAuthenticatedRequest:', error);\n      throw error; // Propaga el error\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","AuthService","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","apiKey","error","console","fetchApiKey","makeAuthenticatedRequest","endpoint","getItem"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/AuthService.js"],"sourcesContent":["// src/services/AuthService.js\r\n\r\nconst API_BASE_URL = 'http://localhost:9001'; // Cambia esto si es necesario\r\n\r\nexport const AuthService = {\r\n    // Método para iniciar sesión\r\n    login: async (username, password) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/Laboratorio1/personas`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ login: username, password }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Error en el inicio de sesión');\r\n            }\r\n\r\n            const data = await response.json();\r\n            localStorage.setItem('token', data.token); // Almacena el token\r\n            localStorage.setItem('apiKey', data.apiKey); // Almacena el API Key\r\n            return data; // Devuelve los datos, incluyendo el token\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Método para obtener la API Key\r\n    fetchApiKey: async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/apiKey`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'username': username, // Envía el nombre de usuario como encabezado\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Error al obtener la API Key');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data; // Devuelve la API Key\r\n        } catch (error) {\r\n            console.error('Error en fetchApiKey:', error);\r\n            throw error; // Propaga el error\r\n        }\r\n    },\r\n\r\n    // Método para realizar solicitudes que requieren el API Key\r\n    makeAuthenticatedRequest: async (endpoint) => {\r\n        const apiKey = localStorage.getItem('apiKey'); // Obtiene el API Key del localStorage\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n                method: 'GET', // Cambia esto según el tipo de solicitud que necesites\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'apikey': apiKey, // Incluye el API Key en los encabezados\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Error en la solicitud autenticada');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data; // Devuelve la respuesta de la solicitud\r\n        } catch (error) {\r\n            console.error('Error en makeAuthenticatedRequest:', error);\r\n            throw error; // Propaga el error\r\n        }\r\n    },\r\n};"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C,OAAO,MAAMC,WAAW,GAAG;EACvB;EACAC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACjC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,wBAAwB,EAAE;QAClEO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,KAAK,EAAEC,QAAQ;UAAEC;QAAS,CAAC;MACtD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACnD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;MAC3CF,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC;MAC7C,OAAOL,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAE,WAAW,EAAE,MAAOnB,QAAQ,IAAK;IAC7B,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,SAAS,EAAE;QACnDO,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,UAAU,EAAEL,QAAQ,CAAE;QAC1B;MACJ,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ,CAAC;EAED;EACAG,wBAAwB,EAAE,MAAOC,QAAQ,IAAK;IAC1C,MAAML,MAAM,GAAGH,YAAY,CAACS,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;IAE/C,IAAI;MACA,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,GAAGwB,QAAQ,EAAE,EAAE;QACvDjB,MAAM,EAAE,KAAK;QAAE;QACfC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAEW,MAAM,CAAE;QACtB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACxD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}