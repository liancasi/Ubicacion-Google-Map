{"ast":null,"code":"const API_URL = 'http://localhost:9001/Laboratorio1';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Error en la solicitud: ${response.status} ${response.statusText} - ${errorText}`);\n  }\n  return response.json();\n};\nconst PersonaService = {\n  getHeaders: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No se encontr贸 un token. Inicia sesi贸n nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  },\n  getHeadersForRegister: () => {\n    return {\n      'Content-Type': 'application/json'\n    };\n  },\n  getAllPersons: async () => {\n    try {\n      const response = await fetch(`${API_URL}/personas`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      throw error;\n    }\n  },\n  getPersonById: async id => {\n    try {\n      const response = await fetch(`${API_URL}/personas/${id}`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error(`Error al obtener persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  registerUser: async personData => {\n    try {\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'POST',\n        headers: PersonaService.getHeadersForRegister(),\n        // Usa cabeceras sin token\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      throw error;\n    }\n  },\n  createPerson: async personData => {\n    try {\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'POST',\n        headers: PersonaService.getHeaders(),\n        // Usa cabeceras con token\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al crear persona:', error);\n      throw error;\n    }\n  },\n  updatePerson: async (id, personData) => {\n    try {\n      const response = await fetch(`${API_URL}/personas/${id}`, {\n        method: 'PUT',\n        headers: PersonaService.getHeaders(),\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error(`Error al actualizar persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  deletePerson: async id => {\n    try {\n      const response = await fetch(`${API_URL}/personas/${id}`, {\n        method: 'DELETE',\n        headers: PersonaService.getHeaders()\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  fetchCoordinates: async ids => {\n    try {\n      const queryParams = ids.map(id => `ids=${id}`).join('&');\n      const response = await fetch(`${API_URL}/coordenadas/lista?${queryParams}`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al obtener coordenadas:', error);\n      throw error;\n    }\n  }\n};\nexport default PersonaService;","map":{"version":3,"names":["API_URL","handleResponse","response","ok","errorText","text","Error","status","statusText","json","PersonaService","getHeaders","token","localStorage","getItem","getHeadersForRegister","getAllPersons","fetch","method","headers","error","console","getPersonById","id","registerUser","personData","body","JSON","stringify","createPerson","updatePerson","deletePerson","fetchCoordinates","ids","queryParams","map","join"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["const API_URL = 'http://localhost:9001/Laboratorio1';\r\n\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Error en la solicitud: ${response.status} ${response.statusText} - ${errorText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst PersonaService = {\r\n  getHeaders: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No se encontr贸 un token. Inicia sesi贸n nuevamente.');\r\n    }\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    };\r\n  },\r\n\r\n  getHeadersForRegister: () => {\r\n    return {\r\n      'Content-Type': 'application/json',\r\n    };\r\n  },\r\n\r\n  getAllPersons: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al obtener personas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getPersonById: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas/${id}`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error(`Error al obtener persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  registerUser: async (personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeadersForRegister(), // Usa cabeceras sin token\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al registrar usuario:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createPerson: async (personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeaders(), // Usa cabeceras con token\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al crear persona:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updatePerson: async (id, personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas/${id}`, {\r\n        method: 'PUT',\r\n        headers: PersonaService.getHeaders(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error(`Error al actualizar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deletePerson: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas/${id}`, {\r\n        method: 'DELETE',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  fetchCoordinates: async (ids) => {\r\n    try {\r\n      const queryParams = ids.map(id => `ids=${id}`).join('&');\r\n      const response = await fetch(`${API_URL}/coordenadas/lista?${queryParams}`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al obtener coordenadas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}