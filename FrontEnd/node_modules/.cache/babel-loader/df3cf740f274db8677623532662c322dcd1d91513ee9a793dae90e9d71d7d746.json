{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9001/Laboratorio1'; // Cambia esto si es necesario\n\nconst PersonaService = {\n  // Obtener todas las personas\n  getAllPersons: async token => {\n    try {\n      const response = await axios.get(`${API_URL}/personas`, {\n        headers: {\n          'Authorization': `Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJQUE9PSUlfSldUIiwic3ViIjoibGl6ZXRoY2FybyIsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdLCJpYXQiOjE3Mjg3MDk4NjYsImV4cCI6MTcyOTU3Mzg2Nn0.eldgvkN0MnjzuK7PSktA7tk9oqdE--3N3PB08M4-AzWYTFFLMjAqUADZdJkrdXvHcwjVTH2IKyNfnuDE3oIYqw` // Envía el token de autenticación\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      throw error; // Propaga el error para manejarlo en el componente\n    }\n  },\n  // Obtener una persona por ID\n  getPersonById: async (id, token) => {\n    try {\n      const response = await axios.get(`${API_URL}/personas/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener persona:', error);\n      throw error;\n    }\n  },\n  // Agregar una nueva persona\n  addPerson: async (person, token) => {\n    try {\n      const response = await axios.post(`${API_URL}/personas`, person, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al agregar persona:', error);\n      throw error;\n    }\n  },\n  // Actualizar una persona existente\n  updatePerson: async (id, person, token) => {\n    try {\n      const response = await axios.put(`${API_URL}/personas/${id}`, person, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al actualizar persona:', error);\n      throw error;\n    }\n  },\n  // Eliminar una persona\n  deletePerson: async (id, token) => {\n    try {\n      const response = await axios.delete(`${API_URL}/personas/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al eliminar persona:', error);\n      throw error;\n    }\n  },\n  getApiKey: async username => {\n    try {\n      const response = await axios.get(`http://localhost:9001/apiKey`, {\n        headers: {\n          username\n        }\n      });\n      return response.data.apiKey; // Retorna la API Key\n    } catch (error) {\n      console.error('Error al obtener la API Key:', error);\n      throw error;\n    }\n  }\n};\nexport default PersonaService;","map":{"version":3,"names":["axios","API_URL","PersonaService","getAllPersons","token","response","get","headers","data","error","console","getPersonById","id","addPerson","person","post","updatePerson","put","deletePerson","delete","getApiKey","username","apiKey"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:9001/Laboratorio1'; // Cambia esto si es necesario\r\n\r\nconst PersonaService = {\r\n    // Obtener todas las personas\r\n    getAllPersons: async (token) => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/personas`, {\r\n                headers: {\r\n                    'Authorization': `Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJQUE9PSUlfSldUIiwic3ViIjoibGl6ZXRoY2FybyIsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdLCJpYXQiOjE3Mjg3MDk4NjYsImV4cCI6MTcyOTU3Mzg2Nn0.eldgvkN0MnjzuK7PSktA7tk9oqdE--3N3PB08M4-AzWYTFFLMjAqUADZdJkrdXvHcwjVTH2IKyNfnuDE3oIYqw`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al obtener personas:', error);\r\n            throw error; // Propaga el error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Obtener una persona por ID\r\n    getPersonById: async (id, token) => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/personas/${id}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al obtener persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Agregar una nueva persona\r\n    addPerson: async (person, token) => {\r\n        try {\r\n            const response = await axios.post(`${API_URL}/personas`, person, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al agregar persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Actualizar una persona existente\r\n    updatePerson: async (id, person, token) => {\r\n        try {\r\n            const response = await axios.put(`${API_URL}/personas/${id}`, person, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al actualizar persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Eliminar una persona\r\n    deletePerson: async (id, token) => {\r\n        try {\r\n            const response = await axios.delete(`${API_URL}/personas/${id}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al eliminar persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    getApiKey: async (username) => {\r\n      try {\r\n          const response = await axios.get(`http://localhost:9001/apiKey`, {\r\n              headers: { username }\r\n          });\r\n          return response.data.apiKey; // Retorna la API Key\r\n      } catch (error) {\r\n          console.error('Error al obtener la API Key:', error);\r\n          throw error;\r\n      }\r\n  }\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}