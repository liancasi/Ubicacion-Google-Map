{"ast":null,"code":"const API_URL = 'http://localhost:9001/Laboratorio1';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Error en la solicitud: ${response.status} ${response.statusText} - ${errorText}`);\n  }\n  return response.json();\n};\nconst PersonaService = {\n  getHeaders: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  },\n  getHeadersForRegister: () => {\n    return {\n      'Content-Type': 'application/json'\n    };\n  },\n  registerUser: async personData => {\n    try {\n      const response = await fetch(`${API_URL}/register`, {\n        method: 'POST',\n        headers: PersonaService.getHeadersForRegister(),\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      throw error;\n    }\n  }\n\n  // ... otros métodos (getAllPersons, createPerson, etc.)\n};\nexport default PersonaService;","map":{"version":3,"names":["API_URL","handleResponse","response","ok","errorText","text","Error","status","statusText","json","PersonaService","getHeaders","token","localStorage","getItem","getHeadersForRegister","registerUser","personData","fetch","method","headers","body","JSON","stringify","error","console"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["const API_URL = 'http://localhost:9001/Laboratorio1';\r\n\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Error en la solicitud: ${response.status} ${response.statusText} - ${errorText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst PersonaService = {\r\n  getHeaders: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\r\n    }\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    };\r\n  },\r\n\r\n  getHeadersForRegister: () => {\r\n    return {\r\n      'Content-Type': 'application/json',\r\n    };\r\n  },\r\n\r\n  registerUser: async (personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/register`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeadersForRegister(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al registrar usuario:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // ... otros métodos (getAllPersons, createPerson, etc.)\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,oCAAoC;AAEpD,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAAC,0BAA0BJ,QAAQ,CAACK,MAAM,IAAIL,QAAQ,CAACM,UAAU,MAAMJ,SAAS,EAAE,CAAC;EACpG;EACA,OAAOF,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,cAAc,GAAG;EACrBC,UAAU,EAAEA,CAAA,KAAM;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIN,KAAK,CAAC,oDAAoD,CAAC;IACvE;IACA,OAAO;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUM,KAAK;IAClC,CAAC;EACH,CAAC;EAEDG,qBAAqB,EAAEA,CAAA,KAAM;IAC3B,OAAO;MACL,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EAEDC,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMgB,KAAK,CAAC,GAAGlB,OAAO,WAAW,EAAE;QAClDmB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAEV,cAAc,CAACK,qBAAqB,CAAC,CAAC;QAC/CM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,UAAU;MACjC,CAAC,CAAC;MACF,OAAOhB,cAAc,CAACC,QAAQ,CAAC;IACjC,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF,CAAC;AAED,eAAed,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}