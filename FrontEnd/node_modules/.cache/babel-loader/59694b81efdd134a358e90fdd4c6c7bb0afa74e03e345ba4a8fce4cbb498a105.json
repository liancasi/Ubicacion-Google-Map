{"ast":null,"code":"// PersonaService.js\n\nconst API_URL = 'http://localhost:9001/Laboratorio1';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('Server response:', errorText);\n    throw new Error(`Error en la solicitud: ${response.status} - ${errorText}`);\n  }\n  return response.json();\n};\nconst PersonaService = {\n  // Obtener los encabezados de autorización\n  getHeaders: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  },\n  // Encabezados para el registro\n  getHeadersForRegister: () => ({\n    'Content-Type': 'application/json'\n  }),\n  // Manejar las solicitudes fetch\n  fetchData: async (url, method, headers, body) => {\n    try {\n      const response = await fetch(url, {\n        method,\n        headers,\n        body\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error(`Error en la solicitud ${method} a ${url}:`, error);\n      throw error;\n    }\n  },\n  // Obtener todas las personas\n  getAllPersons: () => PersonaService.fetchData(`${API_URL}/personas`, 'GET', PersonaService.getHeaders()),\n  // Obtener persona por ID\n  getPersonById: id => PersonaService.fetchData(`${API_URL}/persona/id/${id}`, 'GET', PersonaService.getHeaders()),\n  // Registrar un nuevo usuario\n  registerUser: async personData => {\n    try {\n      console.log('Sending data:', JSON.stringify(personData, null, 2));\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'POST',\n        headers: PersonaService.getHeadersForRegister(),\n        body: JSON.stringify(personData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        if (errorText.includes(\"nombre de usuario ya está registrado\")) {\n          throw new Error(\"El nombre de usuario ya está registrado\");\n        } else if (errorText.includes(\"correo ya está registrado\")) {\n          throw new Error(\"El correo electrónico ya está registrado\");\n        } else if (errorText.includes(\"identificación ya está registrada\")) {\n          throw new Error(\"La identificación ya está registrada\");\n        } else {\n          throw new Error(errorText);\n        }\n      }\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      throw error;\n    }\n  },\n  // Crear una nueva persona\n  createPerson: personData => PersonaService.fetchData(`${API_URL}/persona`, 'POST', PersonaService.getHeaders(), JSON.stringify(personData)),\n  // Actualizar una persona\n  updatePerson: (id, personData) => PersonaService.fetchData(`${API_URL}/persona`, 'PUT', PersonaService.getHeaders(), JSON.stringify({\n    ...personData,\n    idpersona: id\n  })),\n  // Eliminar una persona\n  deletePerson: async id => {\n    try {\n      const response = await fetch(`${API_URL}/persona/${id}`, {\n        method: 'DELETE',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        if (response.status === 403) {\n          throw new Error('No tienes permiso para eliminar esta persona.');\n        } else if (response.status === 500 && errorText.includes(\"Error al eliminar la persona y sus datos asociados\")) {\n          throw new Error('Hubo un problema al eliminar la persona y sus datos asociados.');\n        } else {\n          throw new Error(`Error al eliminar persona: ${response.status} - ${errorText}`);\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Verificar disponibilidad de nombre de usuario\n  checkUsernameAvailability: username => PersonaService.fetchData(`${API_URL}/check-username/${username}`, 'GET', PersonaService.getHeadersForRegister()),\n  // Verificar disponibilidad de correo electrónico\n  checkEmailAvailability: email => PersonaService.fetchData(`${API_URL}/check-email/${email}`, 'GET', PersonaService.getHeadersForRegister()),\n  // Verificar disponibilidad de identificación\n  checkIdentificationAvailability: identification => PersonaService.fetchData(`${API_URL}/check-identification/${identification}`, 'GET', PersonaService.getHeadersForRegister())\n};\nexport default PersonaService;","map":{"version":3,"names":["API_URL","handleResponse","response","ok","errorText","text","console","error","Error","status","json","PersonaService","getHeaders","token","localStorage","getItem","getHeadersForRegister","fetchData","url","method","headers","body","fetch","getAllPersons","getPersonById","id","registerUser","personData","log","JSON","stringify","includes","createPerson","updatePerson","idpersona","deletePerson","checkUsernameAvailability","username","checkEmailAvailability","email","checkIdentificationAvailability","identification"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["// PersonaService.js\r\n\r\nconst API_URL = 'http://localhost:9001/Laboratorio1';\r\n\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error('Server response:', errorText);\r\n    throw new Error(`Error en la solicitud: ${response.status} - ${errorText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst PersonaService = {\r\n  // Obtener los encabezados de autorización\r\n  getHeaders: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\r\n    }\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    };\r\n  },\r\n\r\n  // Encabezados para el registro\r\n  getHeadersForRegister: () => ({\r\n    'Content-Type': 'application/json',\r\n  }),\r\n\r\n  // Manejar las solicitudes fetch\r\n  fetchData: async (url, method, headers, body) => {\r\n    try {\r\n      const response = await fetch(url, { method, headers, body });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error(`Error en la solicitud ${method} a ${url}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener todas las personas\r\n  getAllPersons: () =>\r\n    PersonaService.fetchData(`${API_URL}/personas`, 'GET', PersonaService.getHeaders()),\r\n\r\n  // Obtener persona por ID\r\n  getPersonById: (id) =>\r\n    PersonaService.fetchData(`${API_URL}/persona/id/${id}`, 'GET', PersonaService.getHeaders()),\r\n\r\n  // Registrar un nuevo usuario\r\n  registerUser: async (personData) => {\r\n    try {\r\n      console.log('Sending data:', JSON.stringify(personData, null, 2));\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeadersForRegister(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        if (errorText.includes(\"nombre de usuario ya está registrado\")) {\r\n          throw new Error(\"El nombre de usuario ya está registrado\");\r\n        } else if (errorText.includes(\"correo ya está registrado\")) {\r\n          throw new Error(\"El correo electrónico ya está registrado\");\r\n        } else if (errorText.includes(\"identificación ya está registrada\")) {\r\n          throw new Error(\"La identificación ya está registrada\");\r\n        } else {\r\n          throw new Error(errorText);\r\n        }\r\n      }\r\n\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al registrar usuario:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear una nueva persona\r\n  createPerson: (personData) =>\r\n    PersonaService.fetchData(`${API_URL}/persona`, 'POST', PersonaService.getHeaders(), JSON.stringify(personData)),\r\n\r\n  // Actualizar una persona\r\n  updatePerson: (id, personData) =>\r\n    PersonaService.fetchData(`${API_URL}/persona`, 'PUT', PersonaService.getHeaders(), JSON.stringify({ ...personData, idpersona: id })),\r\n\r\n  // Eliminar una persona\r\n  deletePerson: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona/${id}`, {\r\n        method: 'DELETE',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        if (response.status === 403) {\r\n          throw new Error('No tienes permiso para eliminar esta persona.');\r\n        } else if (response.status === 500 && errorText.includes(\"Error al eliminar la persona y sus datos asociados\")) {\r\n          throw new Error('Hubo un problema al eliminar la persona y sus datos asociados.');\r\n        } else {\r\n          throw new Error(`Error al eliminar persona: ${response.status} - ${errorText}`);\r\n        }\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Verificar disponibilidad de nombre de usuario\r\n  checkUsernameAvailability: (username) =>\r\n    PersonaService.fetchData(`${API_URL}/check-username/${username}`, 'GET', PersonaService.getHeadersForRegister()),\r\n\r\n  // Verificar disponibilidad de correo electrónico\r\n  checkEmailAvailability: (email) =>\r\n    PersonaService.fetchData(`${API_URL}/check-email/${email}`, 'GET', PersonaService.getHeadersForRegister()),\r\n\r\n  // Verificar disponibilidad de identificación\r\n  checkIdentificationAvailability: (identification) =>\r\n    PersonaService.fetchData(`${API_URL}/check-identification/${identification}`, 'GET', PersonaService.getHeadersForRegister()),\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}