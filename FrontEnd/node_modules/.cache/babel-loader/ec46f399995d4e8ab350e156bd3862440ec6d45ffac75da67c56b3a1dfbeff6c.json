{"ast":null,"code":"import axios from 'axios';\n\n// URL base del API\nconst API_URL = 'http://localhost:9001'; // Cambia esto si tu backend está en otra URL\n\nconst AuthService = {\n  // Método para autenticar al usuario\n  authenticate: async (username, password) => {\n    try {\n      // Realiza la petición de autenticación\n      const authResponse = await axios.post(`${API_URL}/authenticate`, {\n        username,\n        password\n      });\n\n      // Verifica que la respuesta contenga el token\n      if (authResponse.data && authResponse.data.token) {\n        // Si se obtuvo el token, se obtiene la API key\n        const apiKeyResponse = await axios.get(`${API_URL}/apiKey`, {\n          headers: {\n            Authorization: `Bearer ${authResponse.data.token}`,\n            // Enviar el token si es necesario\n            username: username\n          }\n        });\n\n        // Retorna tanto el token como la API key\n        return {\n          token: authResponse.data.token,\n          apiKey: apiKeyResponse.data.apiKey\n        };\n      } else {\n        throw new Error('No se pudo autenticar al usuario');\n      }\n    } catch (error) {\n      // Manejar errores de red o de autenticación\n      if (error.response) {\n        console.error('Error de respuesta:', error.response);\n        throw new Error(`Error al autenticar: ${error.response.data.message || 'Error desconocido'}`);\n      } else if (error.request) {\n        console.error('Error de solicitud:', error.request);\n        throw new Error('No se recibió respuesta del servidor');\n      } else {\n        console.error('Error en la configuración de Axios:', error.message);\n        throw new Error('Error en la solicitud de autenticación');\n      }\n    }\n  },\n  // Método para cerrar sesión\n  logout: () => {\n    localStorage.removeItem('user'); // O donde almacenes el token y la API key\n  },\n  // Método para obtener el usuario actual (si fuera necesario)\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('user')); // O donde almacenes el token y la API key\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","AuthService","authenticate","username","password","authResponse","post","data","token","apiKeyResponse","get","headers","Authorization","apiKey","Error","error","response","console","message","request","logout","localStorage","removeItem","getCurrentUser","JSON","parse","getItem"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// URL base del API\r\nconst API_URL = 'http://localhost:9001'; // Cambia esto si tu backend está en otra URL\r\n\r\nconst AuthService = {\r\n    // Método para autenticar al usuario\r\n    authenticate: async (username, password) => {\r\n        try {\r\n            // Realiza la petición de autenticación\r\n            const authResponse = await axios.post(`${API_URL}/authenticate`, {\r\n                username,\r\n                password,\r\n            });\r\n\r\n            // Verifica que la respuesta contenga el token\r\n            if (authResponse.data && authResponse.data.token) {\r\n                // Si se obtuvo el token, se obtiene la API key\r\n                const apiKeyResponse = await axios.get(`${API_URL}/apiKey`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${authResponse.data.token}`, // Enviar el token si es necesario\r\n                        username: username,\r\n                    },\r\n                });\r\n\r\n                // Retorna tanto el token como la API key\r\n                return {\r\n                    token: authResponse.data.token,\r\n                    apiKey: apiKeyResponse.data.apiKey,\r\n                };\r\n            } else {\r\n                throw new Error('No se pudo autenticar al usuario');\r\n            }\r\n        } catch (error) {\r\n            // Manejar errores de red o de autenticación\r\n            if (error.response) {\r\n                console.error('Error de respuesta:', error.response);\r\n                throw new Error(`Error al autenticar: ${error.response.data.message || 'Error desconocido'}`);\r\n            } else if (error.request) {\r\n                console.error('Error de solicitud:', error.request);\r\n                throw new Error('No se recibió respuesta del servidor');\r\n            } else {\r\n                console.error('Error en la configuración de Axios:', error.message);\r\n                throw new Error('Error en la solicitud de autenticación');\r\n            }\r\n        }\r\n    },\r\n\r\n    // Método para cerrar sesión\r\n    logout: () => {\r\n        localStorage.removeItem('user'); // O donde almacenes el token y la API key\r\n    },\r\n\r\n    // Método para obtener el usuario actual (si fuera necesario)\r\n    getCurrentUser: () => {\r\n        return JSON.parse(localStorage.getItem('user')); // O donde almacenes el token y la API key\r\n    },\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,WAAW,GAAG;EAChB;EACAC,YAAY,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACxC,IAAI;MACA;MACA,MAAMC,YAAY,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,eAAe,EAAE;QAC7DG,QAAQ;QACRC;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIC,YAAY,CAACE,IAAI,IAAIF,YAAY,CAACE,IAAI,CAACC,KAAK,EAAE;QAC9C;QACA,MAAMC,cAAc,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,SAAS,EAAE;UACxDW,OAAO,EAAE;YACLC,aAAa,EAAE,UAAUP,YAAY,CAACE,IAAI,CAACC,KAAK,EAAE;YAAE;YACpDL,QAAQ,EAAEA;UACd;QACJ,CAAC,CAAC;;QAEF;QACA,OAAO;UACHK,KAAK,EAAEH,YAAY,CAACE,IAAI,CAACC,KAAK;UAC9BK,MAAM,EAAEJ,cAAc,CAACF,IAAI,CAACM;QAChC,CAAC;MACL,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACvD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACA,IAAIA,KAAK,CAACC,QAAQ,EAAE;QAChBC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACC,QAAQ,CAAC;QACpD,MAAM,IAAIF,KAAK,CAAC,wBAAwBC,KAAK,CAACC,QAAQ,CAACT,IAAI,CAACW,OAAO,IAAI,mBAAmB,EAAE,CAAC;MACjG,CAAC,MAAM,IAAIH,KAAK,CAACI,OAAO,EAAE;QACtBF,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACI,OAAO,CAAC;QACnD,MAAM,IAAIL,KAAK,CAAC,sCAAsC,CAAC;MAC3D,CAAC,MAAM;QACHG,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACG,OAAO,CAAC;QACnE,MAAM,IAAIJ,KAAK,CAAC,wCAAwC,CAAC;MAC7D;IACJ;EACJ,CAAC;EAED;EACAM,MAAM,EAAEA,CAAA,KAAM;IACVC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;EACrC,CAAC;EAED;EACAC,cAAc,EAAEA,CAAA,KAAM;IAClB,OAAOC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACrD;AACJ,CAAC;AAED,eAAezB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}