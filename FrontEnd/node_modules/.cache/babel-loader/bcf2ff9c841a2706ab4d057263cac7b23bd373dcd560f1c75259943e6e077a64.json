{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\git\\\\repository\\\\laboratoriofrontend\\\\src\\\\components\\\\MapComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport CoordenadasService from \"../services/CoordenadasService\";\nimport PersonaService from \"../services/PersonaService\"; // Asegúrate de importar el servicio de Persona\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  var _selectedPersona$ubic;\n  const [markers, setMarkers] = useState([]);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [selectedPersona, setSelectedPersona] = useState(null);\n  const fetchCoordenadas = async () => {\n    try {\n      const coordenadas = await CoordenadasService.getCoordenadas();\n      console.log(\"Coordenadas recibidas:\", coordenadas);\n      if (!coordenadas || coordenadas.length === 0) {\n        console.error(\"No se recibieron coordenadas válidas.\");\n        return;\n      }\n      const markersData = await Promise.all(coordenadas.map(async coord => {\n        // Obtén la persona correspondiente a cada coordenada\n        const persona = await PersonaService.getPersonById(coord.id); // Asegúrate de que `coord.id` es el ID correcto de la persona\n        return {\n          id: coord.id,\n          marca: coord.marca,\n          lat: parseFloat(coord.longitud),\n          lng: parseFloat(coord.latitud),\n          persona // Incluye la información de la persona\n        };\n      }));\n      console.log(\"Marcadores actuales:\", markersData);\n      setMarkers(markersData);\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchCoordenadas();\n  }, []);\n  const handleMarkerClick = marker => {\n    setSelectedMarker(marker);\n    setSelectedPersona(marker.persona); // Establece la persona seleccionada al hacer clic en el marcador\n  };\n  const handleCloseInfoWindow = () => {\n    setSelectedMarker(null);\n    setSelectedPersona(null); // Limpia la persona seleccionada al cerrar el InfoWindow\n  };\n  const center = markers.length > 0 ? {\n    lat: markers[0].lat,\n    lng: markers[0].lng\n  } : {\n    lat: 0,\n    lng: 0\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyBomnY9UemevV5IVEXtYHP6SWw3kRsERGc\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: {\n        height: \"400px\",\n        width: \"800px\"\n      },\n      center: center,\n      zoom: 6,\n      children: [markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        title: marker.marca,\n        onClick: () => handleMarkerClick(marker)\n      }, marker.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)), selectedMarker && selectedPersona && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedMarker.lat,\n          lng: selectedMarker.lng\n        },\n        onCloseClick: handleCloseInfoWindow,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [selectedPersona.primerNombre, \" \", selectedPersona.segundoNombre, \" \", selectedPersona.primerApellido, \" \", selectedPersona.segundoApellido]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Identificaci\\xF3n: \", selectedPersona.identificacion]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Email: \", selectedPersona.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Ubicaci\\xF3n: \", (_selectedPersona$ubic = selectedPersona.ubicacion) === null || _selectedPersona$ubic === void 0 ? void 0 : _selectedPersona$ubic.direccionCompleta]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Edad Cl\\xEDnica: \", selectedPersona.edadClinica]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"fy7IH3cHdAVsMEFQpMUNErkoEO4=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","InfoWindow","CoordenadasService","PersonaService","jsxDEV","_jsxDEV","MapComponent","_s","_selectedPersona$ubic","markers","setMarkers","selectedMarker","setSelectedMarker","selectedPersona","setSelectedPersona","fetchCoordenadas","coordenadas","getCoordenadas","console","log","length","error","markersData","Promise","all","map","coord","persona","getPersonById","id","marca","lat","parseFloat","longitud","lng","latitud","handleMarkerClick","marker","handleCloseInfoWindow","center","googleMapsApiKey","children","mapContainerStyle","height","width","zoom","position","title","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","primerNombre","segundoNombre","primerApellido","segundoApellido","identificacion","email","ubicacion","direccionCompleta","edadClinica","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/components/MapComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\nimport CoordenadasService from \"../services/CoordenadasService\";\r\nimport PersonaService from \"../services/PersonaService\"; // Asegúrate de importar el servicio de Persona\r\n\r\nconst MapComponent = () => {\r\n  const [markers, setMarkers] = useState([]);\r\n  const [selectedMarker, setSelectedMarker] = useState(null);\r\n  const [selectedPersona, setSelectedPersona] = useState(null);\r\n\r\n  const fetchCoordenadas = async () => {\r\n    try {\r\n      const coordenadas = await CoordenadasService.getCoordenadas();\r\n      console.log(\"Coordenadas recibidas:\", coordenadas);\r\n\r\n      if (!coordenadas || coordenadas.length === 0) {\r\n        console.error(\"No se recibieron coordenadas válidas.\");\r\n        return;\r\n      }\r\n\r\n      const markersData = await Promise.all(coordenadas.map(async (coord) => {\r\n        // Obtén la persona correspondiente a cada coordenada\r\n        const persona = await PersonaService.getPersonById(coord.id); // Asegúrate de que `coord.id` es el ID correcto de la persona\r\n        return {\r\n          id: coord.id,\r\n          marca: coord.marca,\r\n          lat: parseFloat(coord.longitud),\r\n          lng: parseFloat(coord.latitud),\r\n          persona, // Incluye la información de la persona\r\n        };\r\n      }));\r\n\r\n      console.log(\"Marcadores actuales:\", markersData);\r\n      setMarkers(markersData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoordenadas();\r\n  }, []);\r\n\r\n  const handleMarkerClick = (marker) => {\r\n    setSelectedMarker(marker);\r\n    setSelectedPersona(marker.persona); // Establece la persona seleccionada al hacer clic en el marcador\r\n  };\r\n\r\n  const handleCloseInfoWindow = () => {\r\n    setSelectedMarker(null);\r\n    setSelectedPersona(null); // Limpia la persona seleccionada al cerrar el InfoWindow\r\n  };\r\n\r\n  const center =\r\n    markers.length > 0\r\n      ? { lat: markers[0].lat, lng: markers[0].lng }\r\n      : { lat: 0, lng: 0 };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"AIzaSyBomnY9UemevV5IVEXtYHP6SWw3kRsERGc\">\r\n      <GoogleMap\r\n        mapContainerStyle={{ height: \"400px\", width: \"800px\" }}\r\n        center={center}\r\n        zoom={6}\r\n      >\r\n        {markers.map((marker) => (\r\n          <Marker\r\n            key={marker.id}\r\n            position={{ lat: marker.lat, lng: marker.lng }}\r\n            title={marker.marca}\r\n            onClick={() => handleMarkerClick(marker)}\r\n          />\r\n        ))}\r\n\r\n        {selectedMarker && selectedPersona && (\r\n          <InfoWindow\r\n            position={{ lat: selectedMarker.lat, lng: selectedMarker.lng }}\r\n            onCloseClick={handleCloseInfoWindow}\r\n          >\r\n            <div>\r\n              <h5>\r\n                {selectedPersona.primerNombre} {selectedPersona.segundoNombre}{\" \"}\r\n                {selectedPersona.primerApellido}{\" \"}\r\n                {selectedPersona.segundoApellido}\r\n              </h5>\r\n              <p>Identificación: {selectedPersona.identificacion}</p>\r\n              <p>Email: {selectedPersona.email}</p>\r\n              <p>Ubicación: {selectedPersona.ubicacion?.direccionCompleta}</p>\r\n              <p>Edad Clínica: {selectedPersona.edadClinica}</p>\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}