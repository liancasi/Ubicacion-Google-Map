{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9001/Laboratorio1'; // Cambia esto si es necesario\n\nconst PersonaService = {\n  // Método privado para obtener el token\n  _getToken: () => {\n    return localStorage.getItem(\"token\"); // Obtener el token\n  },\n  // Obtener todas las personas\n  getAllPersons: async () => {\n    try {\n      const token = this._getToken(); // Obtener el token\n      const response = await axios.get(`${API_URL}/personas`, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Envía el token de autenticación\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      throw error; // Propaga el error para manejarlo en el componente\n    }\n  },\n  // Obtener una persona por ID\n  getPersonById: async id => {\n    try {\n      const token = this._getToken(); // Obtener el token\n      const response = await axios.get(`${API_URL}/personas/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener persona:', error);\n      throw error;\n    }\n  },\n  // Agregar una nueva persona\n  addPerson: async person => {\n    try {\n      const token = this._getToken(); // Obtener el token\n      const response = await axios.post(`${API_URL}/personas`, person, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al agregar persona:', error);\n      throw error;\n    }\n  },\n  // Actualizar una persona existente\n  updatePerson: async (id, person) => {\n    try {\n      const token = this._getToken(); // Obtener el token\n      const response = await axios.put(`${API_URL}/personas/${id}`, person, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al actualizar persona:', error);\n      throw error;\n    }\n  },\n  // Eliminar una persona\n  deletePerson: async id => {\n    try {\n      const token = this._getToken(); // Obtener el token\n      const response = await axios.delete(`${API_URL}/personas/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al eliminar persona:', error);\n      throw error;\n    }\n  },\n  // Obtener API Key (si es necesario)\n  getApiKey: async username => {\n    try {\n      const token = this._getToken(); // Obtener el token\n      const response = await axios.get(`${API_URL}/apiKey`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'username': username,\n          // Asegúrate de enviar el username también\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener la API Key:', error);\n      throw error;\n    }\n  }\n};\nexport default PersonaService;","map":{"version":3,"names":["axios","API_URL","PersonaService","_getToken","localStorage","getItem","getAllPersons","token","response","get","headers","data","error","console","getPersonById","id","addPerson","person","post","updatePerson","put","deletePerson","delete","getApiKey","username"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:9001/Laboratorio1'; // Cambia esto si es necesario\r\n\r\nconst PersonaService = {\r\n    // Método privado para obtener el token\r\n    _getToken: () => {\r\n        return localStorage.getItem(\"token\"); // Obtener el token\r\n    },\r\n\r\n    // Obtener todas las personas\r\n    getAllPersons: async () => {\r\n        try {\r\n            const token = this._getToken(); // Obtener el token\r\n            const response = await axios.get(`${API_URL}/personas`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Envía el token de autenticación\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al obtener personas:', error);\r\n            throw error; // Propaga el error para manejarlo en el componente\r\n        }\r\n    },\r\n\r\n    // Obtener una persona por ID\r\n    getPersonById: async (id) => {\r\n        try {\r\n            const token = this._getToken(); // Obtener el token\r\n            const response = await axios.get(`${API_URL}/personas/${id}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al obtener persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Agregar una nueva persona\r\n    addPerson: async (person) => {\r\n        try {\r\n            const token = this._getToken(); // Obtener el token\r\n            const response = await axios.post(`${API_URL}/personas`, person, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al agregar persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Actualizar una persona existente\r\n    updatePerson: async (id, person) => {\r\n        try {\r\n            const token = this._getToken(); // Obtener el token\r\n            const response = await axios.put(`${API_URL}/personas/${id}`, person, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al actualizar persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Eliminar una persona\r\n    deletePerson: async (id) => {\r\n        try {\r\n            const token = this._getToken(); // Obtener el token\r\n            const response = await axios.delete(`${API_URL}/personas/${id}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al eliminar persona:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Obtener API Key (si es necesario)\r\n    getApiKey: async (username) => {\r\n        try {\r\n            const token = this._getToken(); // Obtener el token\r\n            const response = await axios.get(`${API_URL}/apiKey`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                    'username': username, // Asegúrate de enviar el username también\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la API Key:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default PersonaService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oCAAoC,CAAC,CAAC;;AAEtD,MAAMC,cAAc,GAAG;EACnB;EACAC,SAAS,EAAEA,CAAA,KAAM;IACb,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC1C,CAAC;EAED;EACAC,aAAa,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,WAAW,EAAE;QACpDS,OAAO,EAAE;UACL,eAAe,EAAE,UAAUH,KAAK,EAAE,CAAE;QACxC;MACJ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ,CAAC;EAED;EACAE,aAAa,EAAE,MAAOC,EAAE,IAAK;IACzB,IAAI;MACA,MAAMR,KAAK,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,aAAac,EAAE,EAAE,EAAE;QAC1DL,OAAO,EAAE;UACL,eAAe,EAAE,UAAUH,KAAK;QACpC;MACJ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAI,SAAS,EAAE,MAAOC,MAAM,IAAK;IACzB,IAAI;MACA,MAAMV,KAAK,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,WAAW,EAAEgB,MAAM,EAAE;QAC7DP,OAAO,EAAE;UACL,eAAe,EAAE,UAAUH,KAAK;QACpC;MACJ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAO,YAAY,EAAE,MAAAA,CAAOJ,EAAE,EAAEE,MAAM,KAAK;IAChC,IAAI;MACA,MAAMV,KAAK,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACoB,GAAG,CAAC,GAAGnB,OAAO,aAAac,EAAE,EAAE,EAAEE,MAAM,EAAE;QAClEP,OAAO,EAAE;UACL,eAAe,EAAE,UAAUH,KAAK;QACpC;MACJ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAS,YAAY,EAAE,MAAON,EAAE,IAAK;IACxB,IAAI;MACA,MAAMR,KAAK,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACsB,MAAM,CAAC,GAAGrB,OAAO,aAAac,EAAE,EAAE,EAAE;QAC7DL,OAAO,EAAE;UACL,eAAe,EAAE,UAAUH,KAAK;QACpC;MACJ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;EACAW,SAAS,EAAE,MAAOC,QAAQ,IAAK;IAC3B,IAAI;MACA,MAAMjB,KAAK,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,SAAS,EAAE;QAClDS,OAAO,EAAE;UACL,eAAe,EAAE,UAAUH,KAAK,EAAE;UAClC,UAAU,EAAEiB,QAAQ;UAAE;UACtB,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MACF,OAAOhB,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC;AAED,eAAeV,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}