{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\git\\\\repository\\\\laboratoriofrontend\\\\src\\\\components\\\\MapComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PersonaService from '../services/PersonaService';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [personas, setPersonas] = useState([]);\n  const [selectedPersonas, setSelectedPersonas] = useState([]);\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const mapRef = useRef(null);\n  const {\n    authData\n  } = useAuth();\n  const {\n    username,\n    password\n  } = authData;\n\n  // Efecto para obtener la lista de personas\n  useEffect(() => {\n    const fetchPersonas = async () => {\n      try {\n        const data = await PersonaService.getAllPersons();\n        setPersonas(data);\n      } catch (error) {\n        console.error('Error al obtener personas', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPersonas();\n  }, []);\n\n  // Efecto para cargar la API de Google Maps\n  useEffect(() => {\n    const loadGoogleMapsApi = () => {\n      return new Promise((resolve, reject) => {\n        if (window.google) {\n          resolve();\n        } else {\n          const script = document.createElement('script');\n          script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBtmSbtAkZMgopeMNzXW4NC4LyzXRLr-ck&libraries=places`;\n          script.async = true;\n          script.onload = () => resolve();\n          script.onerror = () => reject(new Error('Error loading Google Maps API'));\n          document.body.appendChild(script);\n        }\n      });\n    };\n    loadGoogleMapsApi().then(initMap).catch(error => console.error('Error al cargar Google Maps API:', error));\n    return () => {\n      const script = document.querySelector(`script[src*=\"maps.googleapis.com\"]`);\n      if (script) {\n        document.body.removeChild(script);\n      }\n    };\n  }, []);\n\n  // Función para inicializar el mapa\n  const initMap = () => {\n    if (mapRef.current) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 4.43889,\n          lng: -75.23222\n        },\n        // Coordenadas iniciales\n        zoom: 10\n      });\n      setMap(newMap);\n    }\n  };\n\n  // Función para actualizar los marcadores en el mapa\n  const updateMarkers = useCallback(() => {\n    if (map && selectedPersonas.length > 0) {\n      // Eliminar los marcadores existentes\n      markers.forEach(marker => marker.setMap(null));\n      setMarkers([]);\n      PersonaService.fetchCoordinates(selectedPersonas.map(p => p.id), {\n        username,\n        password\n      }).then(coordinates => {\n        if (!coordinates || coordinates.length === 0) {\n          alert('No se encontraron coordenadas.');\n          return;\n        }\n        const newMarkers = coordinates.map(coord => {\n          const lat = parseFloat(coord.latitud);\n          const lng = parseFloat(coord.longitud);\n          if (isNaN(lat) || isNaN(lng)) {\n            console.error('Coordenadas inválidas:', coord);\n            return null;\n          }\n          const marker = new window.google.maps.Marker({\n            position: {\n              lat,\n              lng\n            },\n            map: map,\n            title: coord.nombre || 'Desconocido'\n          });\n          return marker;\n        }).filter(marker => marker !== null);\n        setMarkers(newMarkers);\n        if (newMarkers.length > 0) {\n          const bounds = new window.google.maps.LatLngBounds();\n          newMarkers.forEach(marker => bounds.extend(marker.getPosition()));\n          map.fitBounds(bounds);\n        } else {\n          console.warn('No se encontraron coordenadas válidas');\n        }\n      }).catch(error => {\n        console.error('Error al obtener coordenadas', error);\n        alert('Hubo un problema al obtener las coordenadas.');\n      });\n    }\n  }, [map, selectedPersonas, username, password]);\n\n  // Efecto para actualizar los marcadores cada vez que cambia la selección de personas\n  useEffect(() => {\n    updateMarkers();\n  }, [updateMarkers, selectedPersonas]);\n\n  // Función para manejar el cambio de selección de personas\n  const handleSelectChange = e => {\n    const selectedIds = Array.from(e.target.selectedOptions, option => option.value);\n    const selectedPersons = personas.filter(persona => selectedIds.includes(persona.id.toString()));\n    setSelectedPersonas(selectedPersons);\n  };\n\n  // Función para seleccionar todas las personas\n  const handleSelectAll = () => {\n    setSelectedPersonas(personas);\n  };\n\n  // Función para manejar la búsqueda de personas\n  const handleSearch = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  // Filtrar las personas según el término de búsqueda\n  const filteredPersonas = personas.filter(persona => `${persona.primerNombre} ${persona.segundoNombre} ${persona.primerApellido} ${persona.segundoApellido}`.toLowerCase().includes(searchTerm.toLowerCase()));\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: \"Cargando personas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    style: {\n      background: 'linear-gradient(to right, #e66465, #9198e5)',\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center text-white mb-4\",\n      children: \"Mapa de Ubicaciones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: mapRef,\n          style: {\n            height: '600px',\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Buscar por nombre completo\",\n            value: searchTerm,\n            onChange: handleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"personasSelect\",\n            className: \"text-white\",\n            children: \"Seleccione personas:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"personasSelect\",\n            className: \"form-control\",\n            multiple: true,\n            onChange: handleSelectChange,\n            size: \"10\",\n            value: selectedPersonas.map(p => p.id.toString()),\n            children: filteredPersonas.map(persona => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: persona.id,\n              children: `${persona.primerNombre} ${persona.segundoNombre} ${persona.primerApellido} ${persona.segundoApellido}`\n            }, persona.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary mb-3 me-2\",\n          onClick: handleSelectAll,\n          children: \"Seleccionar Todos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mb-3\",\n          onClick: () => navigate('/home'),\n          children: \"Volver a Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"JSJ+6duhwEvmRzpvrtkhaH55ybY=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useNavigate","PersonaService","useAuth","jsxDEV","_jsxDEV","MapComponent","_s","personas","setPersonas","selectedPersonas","setSelectedPersonas","map","setMap","markers","setMarkers","searchTerm","setSearchTerm","loading","setLoading","navigate","mapRef","authData","username","password","fetchPersonas","data","getAllPersons","error","console","loadGoogleMapsApi","Promise","resolve","reject","window","google","script","document","createElement","src","async","onload","onerror","Error","body","appendChild","then","initMap","catch","querySelector","removeChild","current","newMap","maps","Map","center","lat","lng","zoom","updateMarkers","length","forEach","marker","fetchCoordinates","p","id","coordinates","alert","newMarkers","coord","parseFloat","latitud","longitud","isNaN","Marker","position","title","nombre","filter","bounds","LatLngBounds","extend","getPosition","fitBounds","warn","handleSelectChange","e","selectedIds","Array","from","target","selectedOptions","option","value","selectedPersons","persona","includes","toString","handleSelectAll","handleSearch","filteredPersonas","primerNombre","segundoNombre","primerApellido","segundoApellido","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","background","minHeight","ref","height","width","type","placeholder","onChange","htmlFor","multiple","size","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/components/MapComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PersonaService from '../services/PersonaService';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst MapComponent = () => {\r\n  const [personas, setPersonas] = useState([]);\r\n  const [selectedPersonas, setSelectedPersonas] = useState([]);\r\n  const [map, setMap] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const mapRef = useRef(null);\r\n  \r\n  const { authData } = useAuth();\r\n  const { username, password } = authData;\r\n\r\n  // Efecto para obtener la lista de personas\r\n  useEffect(() => {\r\n    const fetchPersonas = async () => {\r\n      try {\r\n        const data = await PersonaService.getAllPersons();\r\n        setPersonas(data);\r\n      } catch (error) {\r\n        console.error('Error al obtener personas', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPersonas();\r\n  }, []);\r\n\r\n  // Efecto para cargar la API de Google Maps\r\n  useEffect(() => {\r\n    const loadGoogleMapsApi = () => {\r\n      return new Promise((resolve, reject) => {\r\n        if (window.google) {\r\n          resolve();\r\n        } else {\r\n          const script = document.createElement('script');\r\n          script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBtmSbtAkZMgopeMNzXW4NC4LyzXRLr-ck&libraries=places`;\r\n          script.async = true;\r\n          script.onload = () => resolve();\r\n          script.onerror = () => reject(new Error('Error loading Google Maps API'));\r\n          document.body.appendChild(script);\r\n        }\r\n      });\r\n    };\r\n\r\n    loadGoogleMapsApi()\r\n      .then(initMap)\r\n      .catch(error => console.error('Error al cargar Google Maps API:', error));\r\n  \r\n    return () => {\r\n      const script = document.querySelector(`script[src*=\"maps.googleapis.com\"]`);\r\n      if (script) {\r\n        document.body.removeChild(script);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // Función para inicializar el mapa\r\n  const initMap = () => {\r\n    if (mapRef.current) {\r\n      const newMap = new window.google.maps.Map(mapRef.current, {\r\n        center: { lat: 4.43889, lng: -75.23222 }, // Coordenadas iniciales\r\n        zoom: 10,\r\n      });\r\n      setMap(newMap);\r\n    }\r\n  };\r\n\r\n  // Función para actualizar los marcadores en el mapa\r\n  const updateMarkers = useCallback(() => {\r\n    if (map && selectedPersonas.length > 0) {\r\n      // Eliminar los marcadores existentes\r\n      markers.forEach(marker => marker.setMap(null));\r\n      setMarkers([]);\r\n\r\n      PersonaService.fetchCoordinates(selectedPersonas.map(p => p.id), { username, password })\r\n        .then(coordinates => {\r\n          if (!coordinates || coordinates.length === 0) {\r\n            alert('No se encontraron coordenadas.');\r\n            return;\r\n          }\r\n\r\n          const newMarkers = coordinates.map(coord => {\r\n            const lat = parseFloat(coord.latitud);\r\n            const lng = parseFloat(coord.longitud);\r\n            \r\n            if (isNaN(lat) || isNaN(lng)) {\r\n              console.error('Coordenadas inválidas:', coord);\r\n              return null;\r\n            }\r\n\r\n            const marker = new window.google.maps.Marker({\r\n              position: { lat, lng },\r\n              map: map,\r\n              title: coord.nombre || 'Desconocido',\r\n            });\r\n\r\n            return marker;\r\n          }).filter(marker => marker !== null);\r\n\r\n          setMarkers(newMarkers);\r\n\r\n          if (newMarkers.length > 0) {\r\n            const bounds = new window.google.maps.LatLngBounds();\r\n            newMarkers.forEach(marker => bounds.extend(marker.getPosition()));\r\n            map.fitBounds(bounds);\r\n          } else {\r\n            console.warn('No se encontraron coordenadas válidas');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error al obtener coordenadas', error);\r\n          alert('Hubo un problema al obtener las coordenadas.');\r\n        });\r\n    }\r\n  }, [map, selectedPersonas, username, password]);\r\n\r\n  // Efecto para actualizar los marcadores cada vez que cambia la selección de personas\r\n  useEffect(() => {\r\n    updateMarkers();\r\n  }, [updateMarkers, selectedPersonas]);\r\n\r\n  // Función para manejar el cambio de selección de personas\r\n  const handleSelectChange = (e) => {\r\n    const selectedIds = Array.from(e.target.selectedOptions, option => option.value);\r\n    const selectedPersons = personas.filter(persona => selectedIds.includes(persona.id.toString()));\r\n    setSelectedPersonas(selectedPersons);\r\n  };\r\n\r\n  // Función para seleccionar todas las personas\r\n  const handleSelectAll = () => {\r\n    setSelectedPersonas(personas);\r\n  };\r\n\r\n  // Función para manejar la búsqueda de personas\r\n  const handleSearch = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  // Filtrar las personas según el término de búsqueda\r\n  const filteredPersonas = personas.filter(persona => \r\n    `${persona.primerNombre} ${persona.segundoNombre} ${persona.primerApellido} ${persona.segundoApellido}`\r\n      .toLowerCase()\r\n      .includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  if (loading) {\r\n    return <div className=\"text-center\">Cargando personas...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-4\" style={{ background: 'linear-gradient(to right, #e66465, #9198e5)', minHeight: '100vh' }}>\r\n      <h2 className=\"text-center text-white mb-4\">Mapa de Ubicaciones</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8\">\r\n          <div ref={mapRef} style={{ height: '600px', width: '100%' }}></div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"form-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Buscar por nombre completo\"\r\n              value={searchTerm}\r\n              onChange={handleSearch}\r\n            />\r\n          </div>\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"personasSelect\" className=\"text-white\">Seleccione personas:</label>\r\n            <select \r\n              id=\"personasSelect\" \r\n              className=\"form-control\" \r\n              multiple \r\n              onChange={handleSelectChange}\r\n              size=\"10\"\r\n              value={selectedPersonas.map(p => p.id.toString())}\r\n            >\r\n              {filteredPersonas.map(persona => (\r\n                <option key={persona.id} value={persona.id}>\r\n                  {`${persona.primerNombre} ${persona.segundoNombre} ${persona.primerApellido} ${persona.segundoApellido}`}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <button className=\"btn btn-secondary mb-3 me-2\" onClick={handleSelectAll}>\r\n            Seleccionar Todos\r\n          </button>\r\n          <button className=\"btn btn-primary mb-3\" onClick={() => navigate('/home')}>\r\n            Volver a Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}