{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\git\\\\repository\\\\laboratoriofrontend\\\\src\\\\components\\\\MapComponent.jsx\",\n  _s = $RefreshSig$();\n/* global google */\n\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [markers, setMarkers] = useState([]);\n\n  // Suponiendo que obtienes los datos de los usuarios desde una API o estado\n  const fetchUsers = async () => {\n    // Aquí debes implementar la lógica para obtener la lista de usuarios con sus ubicaciones\n    const users = [{\n      id: 1,\n      name: 'Usuario 1',\n      lat: 4.610,\n      lng: -74.083\n    },\n    // Reemplaza con tus datos\n    {\n      id: 2,\n      name: 'Usuario 2',\n      lat: 4.611,\n      lng: -74.084\n    } // Reemplaza con tus datos\n    ];\n    setMarkers(users);\n  };\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const onLoad = marker => {\n    console.log('Marker: ', marker);\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"TU_API_KEY\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: {\n        height: '400px',\n        width: '800px'\n      },\n      center: {\n        lat: 4.610,\n        lng: -74.083\n      } // Ajusta al centro deseado\n      ,\n      zoom: 12,\n      children: markers.map(marker => /*#__PURE__*/_jsxDEV(google.maps.marker.AdvancedMarkerElement, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onLoad: onLoad\n      }, marker.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"aVe0o7Xd1RI2qqyy9XuFimi/3oU=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","jsxDEV","_jsxDEV","MapComponent","_s","markers","setMarkers","fetchUsers","users","id","name","lat","lng","onLoad","marker","console","log","googleMapsApiKey","children","mapContainerStyle","height","width","center","zoom","map","google","maps","AdvancedMarkerElement","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/components/MapComponent.jsx"],"sourcesContent":["/* global google */\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\r\n\r\nconst MapComponent = () => {\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  // Suponiendo que obtienes los datos de los usuarios desde una API o estado\r\n  const fetchUsers = async () => {\r\n    // Aquí debes implementar la lógica para obtener la lista de usuarios con sus ubicaciones\r\n    const users = [\r\n      { id: 1, name: 'Usuario 1', lat: 4.610, lng: -74.083 }, // Reemplaza con tus datos\r\n      { id: 2, name: 'Usuario 2', lat: 4.611, lng: -74.084 }, // Reemplaza con tus datos\r\n    ];\r\n    setMarkers(users);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const onLoad = (marker) => {\r\n    console.log('Marker: ', marker);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"TU_API_KEY\">\r\n      <GoogleMap\r\n        mapContainerStyle={{ height: '400px', width: '800px' }}\r\n        center={{ lat: 4.610, lng: -74.083 }} // Ajusta al centro deseado\r\n        zoom={12}\r\n      >\r\n        {markers.map((marker) => (\r\n          <google.maps.marker.AdvancedMarkerElement\r\n            key={marker.id}\r\n            position={{ lat: marker.lat, lng: marker.lng }}\r\n            onLoad={onLoad}\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n\r\n\r\n"],"mappings":";;AAAA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B;IACA,MAAMC,KAAK,GAAG,CACZ;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,WAAW;MAAEC,GAAG,EAAE,KAAK;MAAEC,GAAG,EAAE,CAAC;IAAO,CAAC;IAAE;IACxD;MAAEH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,WAAW;MAAEC,GAAG,EAAE,KAAK;MAAEC,GAAG,EAAE,CAAC;IAAO,CAAC,CAAE;IAAA,CACzD;IACDN,UAAU,CAACE,KAAK,CAAC;EACnB,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdU,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,MAAM,GAAIC,MAAM,IAAK;IACzBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,MAAM,CAAC;EACjC,CAAC;EAED,oBACEZ,OAAA,CAACF,UAAU;IAACiB,gBAAgB,EAAC,YAAY;IAAAC,QAAA,eACvChB,OAAA,CAACH,SAAS;MACRoB,iBAAiB,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ,CAAE;MACvDC,MAAM,EAAE;QAAEX,GAAG,EAAE,KAAK;QAAEC,GAAG,EAAE,CAAC;MAAO,CAAE,CAAC;MAAA;MACtCW,IAAI,EAAE,EAAG;MAAAL,QAAA,EAERb,OAAO,CAACmB,GAAG,CAAEV,MAAM,iBAClBZ,OAAA,CAACuB,MAAM,CAACC,IAAI,CAACZ,MAAM,CAACa,qBAAqB;QAEvCC,QAAQ,EAAE;UAAEjB,GAAG,EAAEG,MAAM,CAACH,GAAG;UAAEC,GAAG,EAAEE,MAAM,CAACF;QAAI,CAAE;QAC/CC,MAAM,EAAEA;MAAO,GAFVC,MAAM,CAACL,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGf,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB,CAAC;AAAC5B,EAAA,CAtCID,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAwClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}