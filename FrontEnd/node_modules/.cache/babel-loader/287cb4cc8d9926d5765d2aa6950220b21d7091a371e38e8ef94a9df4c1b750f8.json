{"ast":null,"code":"const AuthService = {\n  authenticate: async (username, password) => {\n    try {\n      const authResponse = await axios.post(`${API_URL}/authenticate`, {\n        username,\n        password\n      });\n      if (authResponse.data && authResponse.data.token) {\n        const apiKeyResponse = await axios.get(`${API_URL}/apiKey`, {\n          headers: {\n            username: username\n          }\n        });\n        const apiKey = apiKeyResponse.data.apiKey;\n        return {\n          token: authResponse.data.token,\n          apikey: apiKey\n        };\n      } else {\n        throw new Error('No se pudo autenticar al usuario');\n      }\n    } catch (error) {\n      // Manejar el error de red\n      if (error.response) {\n        console.error('Error de respuesta:', error.response);\n      } else if (error.request) {\n        console.error('Error de solicitud:', error.request);\n      } else {\n        console.error('Error en la configuración de Axios:', error.message);\n      }\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["AuthService","authenticate","username","password","authResponse","axios","post","API_URL","data","token","apiKeyResponse","get","headers","apiKey","apikey","Error","error","response","console","request","message"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/AuthService.js"],"sourcesContent":["const AuthService = {\r\n    authenticate: async (username, password) => {\r\n        try {\r\n            const authResponse = await axios.post(`${API_URL}/authenticate`, {\r\n                username,\r\n                password,\r\n            });\r\n\r\n            if (authResponse.data && authResponse.data.token) {\r\n                const apiKeyResponse = await axios.get(`${API_URL}/apiKey`, {\r\n                    headers: {\r\n                        username: username,\r\n                    },\r\n                });\r\n\r\n                const apiKey = apiKeyResponse.data.apiKey;\r\n\r\n                return {\r\n                    token: authResponse.data.token,\r\n                    apikey: apiKey,\r\n                };\r\n            } else {\r\n                throw new Error('No se pudo autenticar al usuario');\r\n            }\r\n        } catch (error) {\r\n            // Manejar el error de red\r\n            if (error.response) {\r\n                console.error('Error de respuesta:', error.response);\r\n            } else if (error.request) {\r\n                console.error('Error de solicitud:', error.request);\r\n            } else {\r\n                console.error('Error en la configuración de Axios:', error.message);\r\n            }\r\n            throw error;\r\n        }\r\n    },\r\n};\r\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG;EAChBC,YAAY,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACxC,IAAI;MACA,MAAMC,YAAY,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,GAAGC,OAAO,eAAe,EAAE;QAC7DL,QAAQ;QACRC;MACJ,CAAC,CAAC;MAEF,IAAIC,YAAY,CAACI,IAAI,IAAIJ,YAAY,CAACI,IAAI,CAACC,KAAK,EAAE;QAC9C,MAAMC,cAAc,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGJ,OAAO,SAAS,EAAE;UACxDK,OAAO,EAAE;YACLV,QAAQ,EAAEA;UACd;QACJ,CAAC,CAAC;QAEF,MAAMW,MAAM,GAAGH,cAAc,CAACF,IAAI,CAACK,MAAM;QAEzC,OAAO;UACHJ,KAAK,EAAEL,YAAY,CAACI,IAAI,CAACC,KAAK;UAC9BK,MAAM,EAAED;QACZ,CAAC;MACL,CAAC,MAAM;QACH,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;MACvD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACA,IAAIA,KAAK,CAACC,QAAQ,EAAE;QAChBC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACC,QAAQ,CAAC;MACxD,CAAC,MAAM,IAAID,KAAK,CAACG,OAAO,EAAE;QACtBD,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACG,OAAO,CAAC;MACvD,CAAC,MAAM;QACHD,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACI,OAAO,CAAC;MACvE;MACA,MAAMJ,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}