{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9001/Laboratorio1';\nconst PersonaService = {\n  // Función para obtener el encabezado con el token\n  getHeaders: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Usa el token del localStorage\n    };\n  },\n  // Función para autenticar al usuario\n  authenticateUser: async (username, password) => {\n    try {\n      const response = await axios.post(`http://localhost:9001/authenticate`, {\n        username,\n        password\n      });\n\n      // Si la respuesta es exitosa, guarda el token\n      if (response.status === 200) {\n        localStorage.setItem('token', response.data.token); // Suponiendo que el token está en response.data.token\n        return response.data; // Retorna la respuesta completa o solo el token según lo necesites\n      }\n    } catch (error) {\n      console.error('Error al autenticar el usuario:', error);\n      throw new Error('Error de autenticación. Verifica tus credenciales.');\n    }\n  },\n  getAllPersons: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/personas`, {\n        headers: PersonaService.getHeaders()\n      });\n      return response.data; // Retorna la lista de personas\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      throw error;\n    }\n  },\n  getApiKey: async username => {\n    try {\n      const response = await axios.get(`http://localhost:9001/apiKey`, {\n        headers: {\n          username\n        }\n      });\n      return response.data.apiKey; // Devuelve la API Key obtenida\n    } catch (error) {\n      console.error('Error al obtener la API Key:', error);\n      throw new Error('No se pudo recuperar la API Key');\n    }\n  },\n  // Otros métodos...\n\n  createPerson: async personData => {\n    try {\n      const response = await axios.post(`${API_URL}/persona`, personData, {\n        headers: PersonaService.getHeaders()\n      });\n      return response.data; // Retorna la persona creada\n    } catch (error) {\n      console.error('Error al crear persona:', error);\n      throw error;\n    }\n  },\n  updatePerson: async (id, personData) => {\n    try {\n      const response = await axios.put(`${API_URL}/persona`, {\n        ...personData,\n        idpersona: id\n      }, {\n        headers: PersonaService.getHeaders()\n      });\n      return response.data; // Retorna la persona actualizada\n    } catch (error) {\n      console.error(`Error al actualizar persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  deletePerson: async id => {\n    try {\n      await axios.delete(`${API_URL}/persona/${id}`, {\n        headers: PersonaService.getHeaders()\n      });\n      return true; // Retorna true si se eliminó correctamente\n    } catch (error) {\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Otras funciones para verificar disponibilidad de username, email, etc.\n};\nexport default PersonaService;","map":{"version":3,"names":["axios","API_URL","PersonaService","getHeaders","token","localStorage","getItem","Error","authenticateUser","username","password","response","post","status","setItem","data","error","console","getAllPersons","get","headers","getApiKey","apiKey","createPerson","personData","updatePerson","id","put","idpersona","deletePerson","delete"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:9001/Laboratorio1';\r\n\r\nconst PersonaService = {\r\n  // Función para obtener el encabezado con el token\r\n  getHeaders: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\r\n    }\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`, // Usa el token del localStorage\r\n    };\r\n  },\r\n\r\n  // Función para autenticar al usuario\r\n  authenticateUser: async (username, password) => {\r\n    try {\r\n      const response = await axios.post(`http://localhost:9001/authenticate`, {\r\n        username,\r\n        password,\r\n      });\r\n\r\n      // Si la respuesta es exitosa, guarda el token\r\n      if (response.status === 200) {\r\n        localStorage.setItem('token', response.data.token); // Suponiendo que el token está en response.data.token\r\n        return response.data; // Retorna la respuesta completa o solo el token según lo necesites\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al autenticar el usuario:', error);\r\n      throw new Error('Error de autenticación. Verifica tus credenciales.');\r\n    }\r\n  },\r\n\r\n  getAllPersons: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/personas`, {\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return response.data; // Retorna la lista de personas\r\n    } catch (error) {\r\n      console.error('Error al obtener personas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getApiKey: async (username) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:9001/apiKey`, {\r\n        headers: { username },\r\n      });\r\n      return response.data.apiKey; // Devuelve la API Key obtenida\r\n    } catch (error) {\r\n      console.error('Error al obtener la API Key:', error);\r\n      throw new Error('No se pudo recuperar la API Key');\r\n    }\r\n  },\r\n\r\n  // Otros métodos...\r\n  \r\n  createPerson: async (personData) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/persona`, personData, {\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return response.data; // Retorna la persona creada\r\n    } catch (error) {\r\n      console.error('Error al crear persona:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updatePerson: async (id, personData) => {\r\n    try {\r\n      const response = await axios.put(`${API_URL}/persona`, { ...personData, idpersona: id }, {\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return response.data; // Retorna la persona actualizada\r\n    } catch (error) {\r\n      console.error(`Error al actualizar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deletePerson: async (id) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/persona/${id}`, {\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return true; // Retorna true si se eliminó correctamente\r\n    } catch (error) {\r\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Otras funciones para verificar disponibilidad de username, email, etc.\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oCAAoC;AAEpD,MAAMC,cAAc,GAAG;EACrB;EACAC,UAAU,EAAEA,CAAA,KAAM;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,oDAAoD,CAAC;IACvE;IACA,OAAO;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUH,KAAK,EAAE,CAAE;IACtC,CAAC;EACH,CAAC;EAED;EACAI,gBAAgB,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,oCAAoC,EAAE;QACtEH,QAAQ;QACRC;MACF,CAAC,CAAC;;MAEF;MACA,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3BR,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC;QACpD,OAAOO,QAAQ,CAACI,IAAI,CAAC,CAAC;MACxB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIT,KAAK,CAAC,oDAAoD,CAAC;IACvE;EACF,CAAC;EAEDW,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMX,KAAK,CAACmB,GAAG,CAAC,GAAGlB,OAAO,WAAW,EAAE;QACtDmB,OAAO,EAAElB,cAAc,CAACC,UAAU,CAAC;MACrC,CAAC,CAAC;MACF,OAAOQ,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDK,SAAS,EAAE,MAAOZ,QAAQ,IAAK;IAC7B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMX,KAAK,CAACmB,GAAG,CAAC,8BAA8B,EAAE;QAC/DC,OAAO,EAAE;UAAEX;QAAS;MACtB,CAAC,CAAC;MACF,OAAOE,QAAQ,CAACI,IAAI,CAACO,MAAM,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIT,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF,CAAC;EAED;;EAEAgB,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGX,OAAO,UAAU,EAAEuB,UAAU,EAAE;QAClEJ,OAAO,EAAElB,cAAc,CAACC,UAAU,CAAC;MACrC,CAAC,CAAC;MACF,OAAOQ,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDS,YAAY,EAAE,MAAAA,CAAOC,EAAE,EAAEF,UAAU,KAAK;IACtC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMX,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,UAAU,EAAE;QAAE,GAAGuB,UAAU;QAAEI,SAAS,EAAEF;MAAG,CAAC,EAAE;QACvFN,OAAO,EAAElB,cAAc,CAACC,UAAU,CAAC;MACrC,CAAC,CAAC;MACF,OAAOQ,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsCU,EAAE,GAAG,EAAEV,KAAK,CAAC;MACjE,MAAMA,KAAK;IACb;EACF,CAAC;EAEDa,YAAY,EAAE,MAAOH,EAAE,IAAK;IAC1B,IAAI;MACF,MAAM1B,KAAK,CAAC8B,MAAM,CAAC,GAAG7B,OAAO,YAAYyB,EAAE,EAAE,EAAE;QAC7CN,OAAO,EAAElB,cAAc,CAACC,UAAU,CAAC;MACrC,CAAC,CAAC;MACF,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCU,EAAE,GAAG,EAAEV,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF,CAAC;AAED,eAAed,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}