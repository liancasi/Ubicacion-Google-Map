{"ast":null,"code":"import axios from \"axios\";\nconst USUARIO_BASE_REST_API_URL = \"http://localhost:9001/Laboratorio1/personas\";\nconst AUTHENTICATE_URL = \"http://localhost:9001/authenticate\";\nclass PersonaService {\n  // Obtener todas las personas\n  getAll() {\n    const token = localStorage.getItem('token'); // Cambia según cómo manejes el token\n    return axios.get(USUARIO_BASE_REST_API_URL, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => {\n      return res.data;\n    }).catch(error => {\n      console.error(\"Error al obtener las personas:\", error);\n      throw error;\n    });\n  }\n\n  // Registrar un nuevo usuario\n  register(data) {\n    return axios.post(USUARIO_BASE_REST_API_URL, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return res.data;\n    }).catch(error => {\n      console.error(\"Error al registrar:\", error);\n      throw error;\n    });\n  }\n\n  // Autenticar al usuario\n  authenticate(username, password, apiKey) {\n    return axios.post(AUTHENTICATE_URL, {\n      username,\n      password\n    }, {\n      headers: {\n        apikey: apiKey\n      }\n    }).then(res => {\n      const token = res.data.token; // Asegúrate de que la respuesta incluya el token\n      localStorage.setItem('token', token); // Almacena el token en el almacenamiento local\n      return res.data; // Devuelve los datos de autenticación\n    }).catch(error => {\n      console.error(\"Error al autenticar:\", error);\n      throw error;\n    });\n  }\n}\nexport default new PersonaService();","map":{"version":3,"names":["axios","USUARIO_BASE_REST_API_URL","AUTHENTICATE_URL","PersonaService","getAll","token","localStorage","getItem","get","headers","then","res","data","catch","error","console","register","post","authenticate","username","password","apiKey","apikey","setItem"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst USUARIO_BASE_REST_API_URL = \"http://localhost:9001/Laboratorio1/personas\";\r\nconst AUTHENTICATE_URL = \"http://localhost:9001/authenticate\";\r\n\r\nclass PersonaService {\r\n    // Obtener todas las personas\r\n    getAll() {\r\n        const token = localStorage.getItem('token'); // Cambia según cómo manejes el token\r\n        return axios.get(USUARIO_BASE_REST_API_URL, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then(res => {\r\n            return res.data;\r\n        }).catch(error => {\r\n            console.error(\"Error al obtener las personas:\", error);\r\n            throw error;\r\n        });\r\n    }\r\n\r\n    // Registrar un nuevo usuario\r\n    register(data) {\r\n        return axios.post(USUARIO_BASE_REST_API_URL, data, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            return res.data;\r\n        }).catch(error => {\r\n            console.error(\"Error al registrar:\", error);\r\n            throw error;\r\n        });\r\n    }\r\n\r\n    // Autenticar al usuario\r\n    authenticate(username, password, apiKey) {\r\n        return axios.post(AUTHENTICATE_URL, {\r\n            username,\r\n            password\r\n        }, {\r\n            headers: {\r\n                apikey: apiKey\r\n            }\r\n        }).then(res => {\r\n            const token = res.data.token; // Asegúrate de que la respuesta incluya el token\r\n            localStorage.setItem('token', token); // Almacena el token en el almacenamiento local\r\n            return res.data; // Devuelve los datos de autenticación\r\n        }).catch(error => {\r\n            console.error(\"Error al autenticar:\", error);\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default new PersonaService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,yBAAyB,GAAG,6CAA6C;AAC/E,MAAMC,gBAAgB,GAAG,oCAAoC;AAE7D,MAAMC,cAAc,CAAC;EACjB;EACAC,MAAMA,CAAA,EAAG;IACL,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,OAAOP,KAAK,CAACQ,GAAG,CAACP,yBAAyB,EAAE;MACxCQ,OAAO,EAAE;QACL,eAAe,EAAE,UAAUJ,KAAK;MACpC;IACJ,CAAC,CAAC,CAACK,IAAI,CAACC,GAAG,IAAI;MACX,OAAOA,GAAG,CAACC,IAAI;IACnB,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACf,CAAC,CAAC;EACN;;EAEA;EACAE,QAAQA,CAACJ,IAAI,EAAE;IACX,OAAOZ,KAAK,CAACiB,IAAI,CAAChB,yBAAyB,EAAEW,IAAI,EAAE;MAC/CH,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;MACX,OAAOA,GAAG,CAACC,IAAI;IACnB,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf,CAAC,CAAC;EACN;;EAEA;EACAI,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACrC,OAAOrB,KAAK,CAACiB,IAAI,CAACf,gBAAgB,EAAE;MAChCiB,QAAQ;MACRC;IACJ,CAAC,EAAE;MACCX,OAAO,EAAE;QACLa,MAAM,EAAED;MACZ;IACJ,CAAC,CAAC,CAACX,IAAI,CAACC,GAAG,IAAI;MACX,MAAMN,KAAK,GAAGM,GAAG,CAACC,IAAI,CAACP,KAAK,CAAC,CAAC;MAC9BC,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC,CAAC,CAAC;MACtC,OAAOM,GAAG,CAACC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACf,CAAC,CAAC;EACN;AACJ;AAEA,eAAe,IAAIX,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}