{"ast":null,"code":"const API_URL = 'http://localhost:9001/LaboratorioV1';\n\n// Función para obtener el token almacenado en localStorage (o sessionStorage)\nconst getToken = () => {\n  return localStorage.getItem('token'); // Asume que el token se guarda bajo la clave 'token'\n};\nconst PersonaService = {\n  // Verifica si hay un token y lo agrega a las cabeceras de las solicitudes\n  getHeaders: () => {\n    const token = getToken();\n    if (!token) {\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Incluye el token en la cabecera\n    };\n  },\n  // Obtener todas las personas\n  getAllPersons: async () => {\n    try {\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error('Error al obtener la lista de personas');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      return null;\n    }\n  },\n  // Obtener una persona por ID\n  getPersonById: async id => {\n    try {\n      const response = await fetch(`${API_URL}/persona/${id}`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error(`Error al obtener persona con ID ${id}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener persona:', error);\n      return null;\n    }\n  },\n  // Crear una nueva persona\n  createPerson: async personData => {\n    try {\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'POST',\n        headers: PersonaService.getHeaders(),\n        body: JSON.stringify(personData)\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error('Error al crear una nueva persona');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al crear persona:', error);\n      return null;\n    }\n  },\n  // Actualizar una persona\n  updatePerson: async (id, personData) => {\n    try {\n      const response = await fetch(`${API_URL}/persona/${id}`, {\n        method: 'PUT',\n        headers: PersonaService.getHeaders(),\n        body: JSON.stringify(personData)\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error(`Error al actualizar persona con ID ${id}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al actualizar persona:', error);\n      return null;\n    }\n  },\n  // Eliminar una persona\n  deletePerson: async id => {\n    try {\n      const response = await fetch(`${API_URL}/persona/${id}`, {\n        method: 'DELETE',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error(`Error al eliminar persona con ID ${id}`);\n      }\n      return 'Persona eliminada exitosamente';\n    } catch (error) {\n      console.error('Error al eliminar persona:', error);\n      return null;\n    }\n  },\n  // Obtener coordenadas\n  fetchCoordinates: async () => {\n    try {\n      const response = await fetch(`${API_URL}/coordenadas`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error('Error al obtener las coordenadas');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener las coordenadas:', error);\n      return null;\n    }\n  }\n};\nexport default PersonaService;","map":{"version":3,"names":["API_URL","getToken","localStorage","getItem","PersonaService","getHeaders","token","Error","getAllPersons","response","fetch","method","headers","ok","status","data","json","error","console","getPersonById","id","createPerson","personData","body","JSON","stringify","updatePerson","deletePerson","fetchCoordinates"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["const API_URL = 'http://localhost:9001/LaboratorioV1';\r\n\r\n// Función para obtener el token almacenado en localStorage (o sessionStorage)\r\nconst getToken = () => {\r\n  return localStorage.getItem('token'); // Asume que el token se guarda bajo la clave 'token'\r\n};\r\n\r\nconst PersonaService = {\r\n  // Verifica si hay un token y lo agrega a las cabeceras de las solicitudes\r\n  getHeaders: () => {\r\n    const token = getToken();\r\n    if (!token) {\r\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\r\n    }\r\n\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`, // Incluye el token en la cabecera\r\n    };\r\n  },\r\n\r\n  // Obtener todas las personas\r\n  getAllPersons: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error('Error al obtener la lista de personas');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener personas:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Obtener una persona por ID\r\n  getPersonById: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona/${id}`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error(`Error al obtener persona con ID ${id}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener persona:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Crear una nueva persona\r\n  createPerson: async (personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeaders(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error('Error al crear una nueva persona');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al crear persona:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Actualizar una persona\r\n  updatePerson: async (id, personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona/${id}`, {\r\n        method: 'PUT',\r\n        headers: PersonaService.getHeaders(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error(`Error al actualizar persona con ID ${id}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al actualizar persona:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Eliminar una persona\r\n  deletePerson: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona/${id}`, {\r\n        method: 'DELETE',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error(`Error al eliminar persona con ID ${id}`);\r\n      }\r\n\r\n      return 'Persona eliminada exitosamente';\r\n    } catch (error) {\r\n      console.error('Error al eliminar persona:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Obtener coordenadas\r\n  fetchCoordinates: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/coordenadas`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error('Error al obtener las coordenadas');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener las coordenadas:', error);\r\n      return null;\r\n    }\r\n  },\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}