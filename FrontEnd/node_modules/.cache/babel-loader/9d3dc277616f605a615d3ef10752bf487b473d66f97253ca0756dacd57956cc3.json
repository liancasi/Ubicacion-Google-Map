{"ast":null,"code":"const API_URL = 'http://localhost:9001/Laboratorio1';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('Server response:', errorText);\n    throw new Error(`Error en la solicitud: ${response.status} - ${errorText}`);\n  }\n  return response.json();\n};\nconst PersonaService = {\n  getHeaders: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No se encontr贸 un token. Inicia sesi贸n nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  },\n  getHeadersForRegister: () => {\n    return {\n      'Content-Type': 'application/json'\n    };\n  },\n  getAllPersons: async () => {\n    try {\n      const response = await fetch(`${API_URL}/personas`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      throw error;\n    }\n  },\n  getPersonById: async id => {\n    try {\n      const response = await fetch(`${API_URL}/personas/${id}`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error(`Error al obtener persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  registerUser: async personData => {\n    try {\n      console.log('Sending data:', JSON.stringify(personData, null, 2));\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'POST',\n        headers: PersonaService.getHeadersForRegister(),\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      throw error;\n    }\n  },\n  createPerson: async personData => {\n    try {\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'POST',\n        headers: PersonaService.getHeaders(),\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error al crear persona:', error);\n      throw error;\n    }\n  },\n  updatePerson: async (id, personData) => {\n    try {\n      const response = await fetch(`${API_URL}/personas/${id}`, {\n        method: 'PUT',\n        headers: PersonaService.getHeaders(),\n        body: JSON.stringify(personData)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error(`Error al actualizar persona con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  deletePerson: async id => {\n    try {\n      const response = await fetch(`${API_URL}/persona/${id}`, {\n        method: 'DELETE',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Error al eliminar persona: ${response.status} - ${errorText}`);\n      }\n      return true; // Return true if deletion was successful\n    } catch (error) {\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\nexport default PersonaService;","map":{"version":3,"names":["API_URL","handleResponse","response","ok","errorText","text","console","error","Error","status","json","PersonaService","getHeaders","token","localStorage","getItem","getHeadersForRegister","getAllPersons","fetch","method","headers","getPersonById","id","registerUser","personData","log","JSON","stringify","body","createPerson","updatePerson","deletePerson"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["const API_URL = 'http://localhost:9001/Laboratorio1';\r\n\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error('Server response:', errorText);\r\n    throw new Error(`Error en la solicitud: ${response.status} - ${errorText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst PersonaService = {\r\n  getHeaders: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No se encontr贸 un token. Inicia sesi贸n nuevamente.');\r\n    }\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    };\r\n  },\r\n\r\n  getHeadersForRegister: () => {\r\n    return {\r\n      'Content-Type': 'application/json',\r\n    };\r\n  },\r\n\r\n  getAllPersons: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al obtener personas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getPersonById: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas/${id}`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error(`Error al obtener persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  registerUser: async (personData) => {\r\n    try {\r\n      console.log('Sending data:', JSON.stringify(personData, null, 2));\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeadersForRegister(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al registrar usuario:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createPerson: async (personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'POST',\r\n        headers: PersonaService.getHeaders(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error al crear persona:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updatePerson: async (id, personData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/personas/${id}`, {\r\n        method: 'PUT',\r\n        headers: PersonaService.getHeaders(),\r\n        body: JSON.stringify(personData),\r\n      });\r\n      return handleResponse(response);\r\n    } catch (error) {\r\n      console.error(`Error al actualizar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  deletePerson: async (id) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona/${id}`, {\r\n        method: 'DELETE',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Error al eliminar persona: ${response.status} - ${errorText}`);\r\n      }\r\n      return true; // Return true if deletion was successful\r\n    } catch (error) {\r\n      console.error(`Error al eliminar persona con ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n\r\n};\r\n\r\nexport default PersonaService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}