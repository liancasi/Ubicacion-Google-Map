{"ast":null,"code":"const API_URL = 'http://localhost:9001/Laboratorio1';\n\n// Función para obtener el token almacenado en localStorage\nconst getToken = () => {\n  return localStorage.getItem('token'); // Asume que el token se guarda bajo la clave 'token'\n};\nconst PersonaService = {\n  // Verifica si hay un token y lo agrega a las cabeceras de las solicitudes\n  getHeaders: () => {\n    const token = getToken();\n    if (!token) {\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\n    }\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  },\n  // Obtener todas las personas\n  getAllPersons: async () => {\n    try {\n      const response = await fetch(`${API_URL}/persona`, {\n        method: 'GET',\n        headers: PersonaService.getHeaders()\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\n        }\n        throw new Error('Error al obtener la lista de personas');\n      }\n      const data = await response.json();\n      return data; // Devuelve los datos\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n      return null; // Retorna null en caso de error\n    }\n  }\n\n  // Otras funciones de PersonaService (getPersonById, createPerson, updatePerson, deletePerson, fetchCoordinates)\n  // ... (código no modificado)\n};\nexport default PersonaService;","map":{"version":3,"names":["API_URL","getToken","localStorage","getItem","PersonaService","getHeaders","token","Error","getAllPersons","response","fetch","method","headers","ok","status","data","json","error","console"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/PersonaService.js"],"sourcesContent":["const API_URL = 'http://localhost:9001/Laboratorio1';\r\n\r\n// Función para obtener el token almacenado en localStorage\r\nconst getToken = () => {\r\n  return localStorage.getItem('token'); // Asume que el token se guarda bajo la clave 'token'\r\n};\r\n\r\nconst PersonaService = {\r\n  // Verifica si hay un token y lo agrega a las cabeceras de las solicitudes\r\n  getHeaders: () => {\r\n    const token = getToken();\r\n    if (!token) {\r\n      throw new Error('No se encontró un token. Inicia sesión nuevamente.');\r\n    }\r\n\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    };\r\n  },\r\n\r\n  // Obtener todas las personas\r\n  getAllPersons: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/persona`, {\r\n        method: 'GET',\r\n        headers: PersonaService.getHeaders(),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Acceso no autorizado. Inicia sesión nuevamente.');\r\n        }\r\n        throw new Error('Error al obtener la lista de personas');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data; // Devuelve los datos\r\n    } catch (error) {\r\n      console.error('Error al obtener personas:', error);\r\n      return null; // Retorna null en caso de error\r\n    }\r\n  },\r\n\r\n  // Otras funciones de PersonaService (getPersonById, createPerson, updatePerson, deletePerson, fetchCoordinates)\r\n  // ... (código no modificado)\r\n};\r\n\r\nexport default PersonaService;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,oCAAoC;;AAEpD;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AACxC,CAAC;AAED,MAAMC,cAAc,GAAG;EACrB;EACAC,UAAU,EAAEA,CAAA,KAAM;IAChB,MAAMC,KAAK,GAAGL,QAAQ,CAAC,CAAC;IACxB,IAAI,CAACK,KAAK,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,OAAO;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUD,KAAK;IAClC,CAAC;EACH,CAAC;EAED;EACAE,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,OAAO,UAAU,EAAE;QACjDW,MAAM,EAAE,KAAK;QACbC,OAAO,EAAER,cAAc,CAACC,UAAU,CAAC;MACrC,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;QAChB,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAM,IAAIP,KAAK,CAAC,iDAAiD,CAAC;QACpE;QACA,MAAM,IAAIA,KAAK,CAAC,uCAAuC,CAAC;MAC1D;MAEA,MAAMQ,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,IAAI,CAAC,CAAC;IACf;EACF;;EAEA;EACA;AACF,CAAC;AAED,eAAeb,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}