{"ast":null,"code":"// src/services/AuthService.js\n\nconst API_BASE_URL = 'http://localhost:9001'; // Asegúrate de que esta URL sea correcta\n\nexport const AuthService = {\n  // Método para iniciar sesión\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/authenticate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error en el inicio de sesión');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('apiKey', data.apiKey);\n      return data;\n    } catch (error) {\n      console.error('Error en login:', error);\n      throw error;\n    }\n  },\n  // Método para obtener la API Key\n  fetchApiKey: async username => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/apiKey`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'username': username\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error al obtener la API Key');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error en fetchApiKey:', error);\n      throw error;\n    }\n  },\n  // Método para realizar solicitudes que requieren el API Key\n  makeAuthenticatedRequest: async endpoint => {\n    const apiKey = localStorage.getItem('apiKey');\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'apikey': apiKey\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error en la solicitud autenticada');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error en makeAuthenticatedRequest:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","AuthService","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","localStorage","setItem","token","apiKey","error","console","fetchApiKey","makeAuthenticatedRequest","endpoint","getItem"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/services/AuthService.js"],"sourcesContent":["// src/services/AuthService.js\r\n\r\nconst API_BASE_URL = 'http://localhost:9001'; // Asegúrate de que esta URL sea correcta\r\n\r\nexport const AuthService = {\r\n    // Método para iniciar sesión\r\n    login: async (username, password) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/authenticate`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Error en el inicio de sesión');\r\n            }\r\n\r\n            const data = await response.json();\r\n            localStorage.setItem('token', data.token);\r\n            localStorage.setItem('apiKey', data.apiKey);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Método para obtener la API Key\r\n    fetchApiKey: async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/apiKey`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'username': username,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Error al obtener la API Key');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error en fetchApiKey:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Método para realizar solicitudes que requieren el API Key\r\n    makeAuthenticatedRequest: async (endpoint) => {\r\n        const apiKey = localStorage.getItem('apiKey');\r\n        const token = localStorage.getItem('token');\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                    'apikey': apiKey,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Error en la solicitud autenticada');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error en makeAuthenticatedRequest:', error);\r\n            throw error;\r\n        }\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}