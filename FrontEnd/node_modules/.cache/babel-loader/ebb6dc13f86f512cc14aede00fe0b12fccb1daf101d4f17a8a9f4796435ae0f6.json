{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\git\\\\repository\\\\laboratoriofrontend\\\\src\\\\components\\\\MapComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [coordenadas, setCoordenadas] = useState([]);\n  useEffect(() => {\n    // Cargar el mapa con la API de Google Maps\n    const loader = new Loader({\n      apiKey: 'AIzaSyBomnY9UemevV5IVEXtYHP6SWw3kRsERGc',\n      version: 'weekly',\n      libraries: ['places']\n    });\n    loader.load().then(() => {\n      const mapOptions = {\n        center: {\n          lat: 4.60971,\n          lng: -74.08175\n        },\n        zoom: 8\n      };\n      const mapInstance = new google.maps.Map(document.getElementById('map'), mapOptions);\n      setMap(mapInstance);\n\n      // Llamada al backend para obtener las coordenadas\n      fetch('http://localhost:9001/Laboratorio1/coordenadas').then(response => response.json()).then(data => {\n        setCoordenadas(data);\n      }).catch(error => console.error('Error fetching coordenadas:', error));\n    });\n  }, []);\n\n  // Añadir los marcadores al mapa una vez que las coordenadas se obtienen\n  useEffect(() => {\n    if (map && coordenadas.length > 0) {\n      coordenadas.forEach(coord => {\n        new google.maps.Marker({\n          position: {\n            lat: coord.latitud,\n            lng: coord.longitud\n          },\n          map,\n          title: 'Persona registrada'\n        });\n      });\n    }\n  }, [map, coordenadas]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: '500px',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n_s(MapComponent, \"IouC5lsloVeJQU2F801T8rUA59g=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","Loader","jsxDEV","_jsxDEV","MapComponent","_s","map","setMap","coordenadas","setCoordenadas","loader","apiKey","version","libraries","load","then","mapOptions","center","lat","lng","zoom","mapInstance","google","maps","Map","document","getElementById","fetch","response","json","data","catch","error","console","length","forEach","coord","Marker","position","latitud","longitud","title","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/git/repository/laboratoriofrontend/src/components/MapComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n\r\nconst MapComponent = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [coordenadas, setCoordenadas] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Cargar el mapa con la API de Google Maps\r\n    const loader = new Loader({\r\n      apiKey: 'AIzaSyBomnY9UemevV5IVEXtYHP6SWw3kRsERGc',\r\n      version: 'weekly',\r\n      libraries: ['places'],\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const mapOptions = {\r\n        center: { lat: 4.60971, lng: -74.08175 }, \r\n        zoom: 8,\r\n      };\r\n      const mapInstance = new google.maps.Map(document.getElementById('map'), mapOptions);\r\n      setMap(mapInstance);\r\n\r\n      // Llamada al backend para obtener las coordenadas\r\n      fetch('http://localhost:9001/Laboratorio1/coordenadas')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setCoordenadas(data);\r\n        })\r\n        .catch((error) => console.error('Error fetching coordenadas:', error));\r\n    });\r\n  }, []);\r\n\r\n  // Añadir los marcadores al mapa una vez que las coordenadas se obtienen\r\n  useEffect(() => {\r\n    if (map && coordenadas.length > 0) {\r\n      coordenadas.forEach((coord) => {\r\n        new google.maps.Marker({\r\n          position: { lat: coord.latitud, lng: coord.longitud },\r\n          map,\r\n          title: 'Persona registrada',\r\n        });\r\n      });\r\n    }\r\n  }, [map, coordenadas]);\r\n\r\n  return <div id=\"map\" style={{ height: '500px', width: '100%' }} />;\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,MAAM,GAAG,IAAIT,MAAM,CAAC;MACxBU,MAAM,EAAE,yCAAyC;MACjDC,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAE,CAAC,QAAQ;IACtB,CAAC,CAAC;IAEFH,MAAM,CAACI,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACvB,MAAMC,UAAU,GAAG;QACjBC,MAAM,EAAE;UAAEC,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAS,CAAC;QACxCC,IAAI,EAAE;MACR,CAAC;MACD,MAAMC,WAAW,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAEV,UAAU,CAAC;MACnFT,MAAM,CAACc,WAAW,CAAC;;MAEnB;MACAM,KAAK,CAAC,gDAAgD,CAAC,CACpDZ,IAAI,CAAEa,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCd,IAAI,CAAEe,IAAI,IAAK;QACdrB,cAAc,CAACqB,IAAI,CAAC;MACtB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;IAC1E,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjC,SAAS,CAAC,MAAM;IACd,IAAIO,GAAG,IAAIE,WAAW,CAAC0B,MAAM,GAAG,CAAC,EAAE;MACjC1B,WAAW,CAAC2B,OAAO,CAAEC,KAAK,IAAK;QAC7B,IAAId,MAAM,CAACC,IAAI,CAACc,MAAM,CAAC;UACrBC,QAAQ,EAAE;YAAEpB,GAAG,EAAEkB,KAAK,CAACG,OAAO;YAAEpB,GAAG,EAAEiB,KAAK,CAACI;UAAS,CAAC;UACrDlC,GAAG;UACHmC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACnC,GAAG,EAAEE,WAAW,CAAC,CAAC;EAEtB,oBAAOL,OAAA;IAAKuC,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpE,CAAC;AAAC5C,EAAA,CA5CID,YAAY;AAAA8C,EAAA,GAAZ9C,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}